
C:\Users\frede\AppData\Local\Temp\build1976058291312611511.tmp\asemblyInterruptTask.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000008e6  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bb  00800110  00800110  0000098a  2**0
                  ALLOC
  3 .debug_aranges 00000538  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c48  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000064b8  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010cf  00000000  00000000  00007fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c92  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000950  00000000  00000000  0000cd24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001718  00000000  00000000  0000d674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000034a4  00000000  00000000  0000ed8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00043e0e  00000000  00000000  00012230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  0005603e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_1>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_2>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_18>
  4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	37 03       	mulsu	r19, r23

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e6 ee       	ldi	r30, 0xE6	; 230
  d8:	f8 e0       	ldi	r31, 0x08	; 8
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a0 e1       	ldi	r26, 0x10	; 16
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	ab 3c       	cpi	r26, 0xCB	; 203
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c4 ec       	ldi	r28, 0xC4	; 196
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
  fe:	22 97       	sbiw	r28, 0x02	; 2
 100:	fe 01       	movw	r30, r28
 102:	0e 94 6d 04 	call	0x8da	; 0x8da <__tablejump__>

00000106 <.do_global_ctors_start>:
 106:	c2 3c       	cpi	r28, 0xC2	; 194
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
 10c:	0e 94 8d 03 	call	0x71a	; 0x71a <main>
 110:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <loop>:
}

void loop() {
  // put your main code here, to run repeatedly:

}
 118:	08 95       	ret

0000011a <incrementLeft()>:

void incrementLeft(){
  leftTotal++;
 11a:	80 91 10 01 	lds	r24, 0x0110
 11e:	90 91 11 01 	lds	r25, 0x0111
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 11 01 	sts	0x0111, r25
 128:	80 93 10 01 	sts	0x0110, r24
}
 12c:	08 95       	ret

0000012e <incrementRight()>:

void incrementRight(){
  rightTotal++;
 12e:	80 91 12 01 	lds	r24, 0x0112
 132:	90 91 13 01 	lds	r25, 0x0113
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 13 01 	sts	0x0113, r25
 13c:	80 93 12 01 	sts	0x0112, r24
}
 140:	08 95       	ret

00000142 <setup>:
volatile unsigned int leftTotal = 0;
volatile unsigned int rightTotal = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);           // set up Serial library at 9600 bps
 142:	80 ea       	ldi	r24, 0xA0	; 160
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	40 e8       	ldi	r20, 0x80	; 128
 148:	55 e2       	ldi	r21, 0x25	; 37
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 06 02 	call	0x40c	; 0x40c <HardwareSerial::begin(unsigned long)>

  pinMode(20, INPUT);
 152:	84 e1       	ldi	r24, 0x14	; 20
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	0e 94 3d 01 	call	0x27a	; 0x27a <pinMode>
  attachInterrupt(3, incrementLeft, CHANGE);
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	6d e8       	ldi	r22, 0x8D	; 141
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	0e 94 c0 00 	call	0x180	; 0x180 <attachInterrupt>
  pinMode(21, INPUT);
 168:	85 e1       	ldi	r24, 0x15	; 21
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	0e 94 3d 01 	call	0x27a	; 0x27a <pinMode>
  attachInterrupt(2, incrementRight, CHANGE);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	67 e9       	ldi	r22, 0x97	; 151
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	0e 94 c0 00 	call	0x180	; 0x180 <attachInterrupt>
}
 17e:	08 95       	ret

00000180 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	00 f5       	brcc	.+64     	; 0x1c4 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
 184:	e8 2f       	mov	r30, r24
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	ec 5e       	subi	r30, 0xEC	; 236
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	71 83       	std	Z+1, r23	; 0x01
 192:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <attachInterrupt+0x1e>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	a1 f4       	brne	.+40     	; 0x1c4 <attachInterrupt+0x44>
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
 19e:	80 91 69 00 	lds	r24, 0x0069
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	84 2b       	or	r24, r20
 1a6:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
 1aa:	e8 9a       	sbi	0x1d, 0	; 29
 1ac:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
 1ae:	80 91 69 00 	lds	r24, 0x0069
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	83 7f       	andi	r24, 0xF3	; 243
 1bc:	84 2b       	or	r24, r20
 1be:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
 1c2:	e9 9a       	sbi	0x1d, 1	; 29
 1c4:	08 95       	ret

000001c6 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
 1e8:	80 91 14 01 	lds	r24, 0x0114
 1ec:	90 91 15 01 	lds	r25, 0x0115
 1f0:	89 2b       	or	r24, r25
 1f2:	29 f0       	breq	.+10     	; 0x1fe <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
 1f4:	e0 91 14 01 	lds	r30, 0x0114
 1f8:	f0 91 15 01 	lds	r31, 0x0115
 1fc:	09 95       	icall
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_2>:

SIGNAL(INT1_vect) {
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
 242:	80 91 16 01 	lds	r24, 0x0116
 246:	90 91 17 01 	lds	r25, 0x0117
 24a:	89 2b       	or	r24, r25
 24c:	29 f0       	breq	.+10     	; 0x258 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
 24e:	e0 91 16 01 	lds	r30, 0x0116
 252:	f0 91 17 01 	lds	r31, 0x0117
 256:	09 95       	icall
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 27e:	48 2f       	mov	r20, r24
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	ca 01       	movw	r24, r20
 284:	86 56       	subi	r24, 0x66	; 102
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	fc 01       	movw	r30, r24
 28a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 28c:	4a 57       	subi	r20, 0x7A	; 122
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	fa 01       	movw	r30, r20
 292:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 294:	88 23       	and	r24, r24
 296:	69 f1       	breq	.+90     	; 0x2f2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	fc 01       	movw	r30, r24
 2a0:	e8 59       	subi	r30, 0x98	; 152
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	a5 91       	lpm	r26, Z+
 2a6:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 2a8:	fc 01       	movw	r30, r24
 2aa:	ee 58       	subi	r30, 0x8E	; 142
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	c5 91       	lpm	r28, Z+
 2b0:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 2b2:	66 23       	and	r22, r22
 2b4:	51 f4       	brne	.+20     	; 0x2ca <pinMode+0x50>
		uint8_t oldSREG = SREG;
 2b6:	2f b7       	in	r18, 0x3f	; 63
                cli();
 2b8:	f8 94       	cli
		*reg &= ~bit;
 2ba:	8c 91       	ld	r24, X
 2bc:	93 2f       	mov	r25, r19
 2be:	90 95       	com	r25
 2c0:	89 23       	and	r24, r25
 2c2:	8c 93       	st	X, r24
		*out &= ~bit;
 2c4:	88 81       	ld	r24, Y
 2c6:	89 23       	and	r24, r25
 2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 2ca:	62 30       	cpi	r22, 0x02	; 2
 2cc:	61 f4       	brne	.+24     	; 0x2e6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 2ce:	2f b7       	in	r18, 0x3f	; 63
                cli();
 2d0:	f8 94       	cli
		*reg &= ~bit;
 2d2:	8c 91       	ld	r24, X
 2d4:	93 2f       	mov	r25, r19
 2d6:	90 95       	com	r25
 2d8:	89 23       	and	r24, r25
 2da:	8c 93       	st	X, r24
		*out |= bit;
 2dc:	88 81       	ld	r24, Y
 2de:	83 2b       	or	r24, r19
 2e0:	88 83       	st	Y, r24
		SREG = oldSREG;
 2e2:	2f bf       	out	0x3f, r18	; 63
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 2e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 2e8:	f8 94       	cli
		*reg |= bit;
 2ea:	8c 91       	ld	r24, X
 2ec:	83 2b       	or	r24, r19
 2ee:	8c 93       	st	X, r24
		SREG = oldSREG;
 2f0:	9f bf       	out	0x3f, r25	; 63
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <serialEvent()>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 2f8:	08 95       	ret

000002fa <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 312:	80 91 c0 00 	lds	r24, 0x00C0
 316:	82 fd       	sbrc	r24, 2
 318:	1d c0       	rjmp	.+58     	; 0x354 <__vector_18+0x5a>
      unsigned char c = UDR0;
 31a:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 31e:	20 91 58 01 	lds	r18, 0x0158
 322:	30 91 59 01 	lds	r19, 0x0159

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 326:	2f 5f       	subi	r18, 0xFF	; 255
 328:	3f 4f       	sbci	r19, 0xFF	; 255
 32a:	2f 73       	andi	r18, 0x3F	; 63
 32c:	30 70       	andi	r19, 0x00	; 0
 32e:	80 91 5a 01 	lds	r24, 0x015A
 332:	90 91 5b 01 	lds	r25, 0x015B
 336:	28 17       	cp	r18, r24
 338:	39 07       	cpc	r19, r25
 33a:	71 f0       	breq	.+28     	; 0x358 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 33c:	e0 91 58 01 	lds	r30, 0x0158
 340:	f0 91 59 01 	lds	r31, 0x0159
 344:	e8 5e       	subi	r30, 0xE8	; 232
 346:	fe 4f       	sbci	r31, 0xFE	; 254
 348:	40 83       	st	Z, r20
    buffer->head = i;
 34a:	30 93 59 01 	sts	0x0159, r19
 34e:	20 93 58 01 	sts	0x0158, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 354:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 370:	e0 91 ac 01 	lds	r30, 0x01AC
 374:	f0 91 ad 01 	lds	r31, 0x01AD
 378:	e0 5c       	subi	r30, 0xC0	; 192
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	81 91       	ld	r24, Z+
 37e:	91 91       	ld	r25, Z+
 380:	20 81       	ld	r18, Z
 382:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 384:	82 1b       	sub	r24, r18
 386:	93 0b       	sbc	r25, r19
 388:	8f 73       	andi	r24, 0x3F	; 63
 38a:	90 70       	andi	r25, 0x00	; 0
 38c:	89 2b       	or	r24, r25
 38e:	11 f0       	breq	.+4      	; 0x394 <serialEventRun()+0x24>
 390:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <serialEvent()>
 394:	08 95       	ret

00000396 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 3ac:	20 91 9c 01 	lds	r18, 0x019C
 3b0:	30 91 9d 01 	lds	r19, 0x019D
 3b4:	80 91 9e 01 	lds	r24, 0x019E
 3b8:	90 91 9f 01 	lds	r25, 0x019F
 3bc:	28 17       	cp	r18, r24
 3be:	39 07       	cpc	r19, r25
 3c0:	31 f4       	brne	.+12     	; 0x3ce <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 3c2:	80 91 c1 00 	lds	r24, 0x00C1
 3c6:	8f 7d       	andi	r24, 0xDF	; 223
 3c8:	80 93 c1 00 	sts	0x00C1, r24
 3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 3ce:	e0 91 9e 01 	lds	r30, 0x019E
 3d2:	f0 91 9f 01 	lds	r31, 0x019F
 3d6:	e4 5a       	subi	r30, 0xA4	; 164
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 3dc:	80 91 9e 01 	lds	r24, 0x019E
 3e0:	90 91 9f 01 	lds	r25, 0x019F
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	8f 73       	andi	r24, 0x3F	; 63
 3e8:	90 70       	andi	r25, 0x00	; 0
 3ea:	90 93 9f 01 	sts	0x019F, r25
 3ee:	80 93 9e 01 	sts	0x019E, r24
	
  #if defined(UDR0)
    UDR0 = c;
 3f2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 40c:	af 92       	push	r10
 40e:	bf 92       	push	r11
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	ec 01       	movw	r28, r24
 420:	7a 01       	movw	r14, r20
 422:	8b 01       	movw	r16, r22
 424:	dd 24       	eor	r13, r13
 426:	40 30       	cpi	r20, 0x00	; 0
 428:	81 ee       	ldi	r24, 0xE1	; 225
 42a:	58 07       	cpc	r21, r24
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	68 07       	cpc	r22, r24
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	78 07       	cpc	r23, r24
 434:	11 f0       	breq	.+4      	; 0x43a <HardwareSerial::begin(unsigned long)+0x2e>
 436:	dd 24       	eor	r13, r13
 438:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	a9 2e       	mov	r10, r25
 43e:	b1 2c       	mov	r11, r1
 440:	ec 89       	ldd	r30, Y+20	; 0x14
 442:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 444:	dd 20       	and	r13, r13
 446:	69 f0       	breq	.+26     	; 0x462 <HardwareSerial::begin(unsigned long)+0x56>
    *_ucsra = 1 << _u2x;
 448:	c5 01       	movw	r24, r10
 44a:	08 a0       	ldd	r0, Y+32	; 0x20
 44c:	02 c0       	rjmp	.+4      	; 0x452 <HardwareSerial::begin(unsigned long)+0x46>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <HardwareSerial::begin(unsigned long)+0x42>
 456:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	79 e0       	ldi	r23, 0x09	; 9
 45c:	8d e3       	ldi	r24, 0x3D	; 61
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <HardwareSerial::begin(unsigned long)+0x60>
  } else {
    *_ucsra = 0;
 462:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 464:	60 e8       	ldi	r22, 0x80	; 128
 466:	74 e8       	ldi	r23, 0x84	; 132
 468:	8e e1       	ldi	r24, 0x1E	; 30
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	a8 01       	movw	r20, r16
 46e:	97 01       	movw	r18, r14
 470:	0e 94 49 04 	call	0x892	; 0x892 <__udivmodsi4>
 474:	21 50       	subi	r18, 0x01	; 1
 476:	30 40       	sbci	r19, 0x00	; 0
 478:	40 40       	sbci	r20, 0x00	; 0
 47a:	50 40       	sbci	r21, 0x00	; 0
 47c:	56 95       	lsr	r21
 47e:	47 95       	ror	r20
 480:	37 95       	ror	r19
 482:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 484:	80 e1       	ldi	r24, 0x10	; 16
 486:	20 30       	cpi	r18, 0x00	; 0
 488:	38 07       	cpc	r19, r24
 48a:	20 f0       	brcs	.+8      	; 0x494 <HardwareSerial::begin(unsigned long)+0x88>
 48c:	dd 20       	and	r13, r13
 48e:	11 f0       	breq	.+4      	; 0x494 <HardwareSerial::begin(unsigned long)+0x88>
 490:	dd 24       	eor	r13, r13
 492:	d6 cf       	rjmp	.-84     	; 0x440 <HardwareSerial::begin(unsigned long)+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 494:	e8 89       	ldd	r30, Y+16	; 0x10
 496:	f9 89       	ldd	r31, Y+17	; 0x11
 498:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 49a:	ea 89       	ldd	r30, Y+18	; 0x12
 49c:	fb 89       	ldd	r31, Y+19	; 0x13
 49e:	20 83       	st	Z, r18

  transmitting = false;
 4a0:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 4a2:	ee 89       	ldd	r30, Y+22	; 0x16
 4a4:	ff 89       	ldd	r31, Y+23	; 0x17
 4a6:	40 81       	ld	r20, Z
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	c9 01       	movw	r24, r18
 4ae:	0c 8c       	ldd	r0, Y+28	; 0x1c
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <HardwareSerial::begin(unsigned long)+0xaa>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <HardwareSerial::begin(unsigned long)+0xa6>
 4ba:	48 2b       	or	r20, r24
 4bc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 4be:	ee 89       	ldd	r30, Y+22	; 0x16
 4c0:	ff 89       	ldd	r31, Y+23	; 0x17
 4c2:	40 81       	ld	r20, Z
 4c4:	c9 01       	movw	r24, r18
 4c6:	0d 8c       	ldd	r0, Y+29	; 0x1d
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <HardwareSerial::begin(unsigned long)+0xc2>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <HardwareSerial::begin(unsigned long)+0xbe>
 4d2:	48 2b       	or	r20, r24
 4d4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 4d6:	ee 89       	ldd	r30, Y+22	; 0x16
 4d8:	ff 89       	ldd	r31, Y+23	; 0x17
 4da:	40 81       	ld	r20, Z
 4dc:	c9 01       	movw	r24, r18
 4de:	0e 8c       	ldd	r0, Y+30	; 0x1e
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <HardwareSerial::begin(unsigned long)+0xda>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <HardwareSerial::begin(unsigned long)+0xd6>
 4ea:	48 2b       	or	r20, r24
 4ec:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 4ee:	ee 89       	ldd	r30, Y+22	; 0x16
 4f0:	ff 89       	ldd	r31, Y+23	; 0x17
 4f2:	80 81       	ld	r24, Z
 4f4:	0f 8c       	ldd	r0, Y+31	; 0x1f
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <HardwareSerial::begin(unsigned long)+0xf0>
 4f8:	22 0f       	add	r18, r18
 4fa:	33 1f       	adc	r19, r19
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <HardwareSerial::begin(unsigned long)+0xec>
 500:	20 95       	com	r18
 502:	28 23       	and	r18, r24
 504:	20 83       	st	Z, r18
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	bf 90       	pop	r11
 516:	af 90       	pop	r10
 518:	08 95       	ret

0000051a <HardwareSerial::available()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 51a:	dc 01       	movw	r26, r24
 51c:	1c 96       	adiw	r26, 0x0c	; 12
 51e:	ed 91       	ld	r30, X+
 520:	fc 91       	ld	r31, X
 522:	1d 97       	sbiw	r26, 0x0d	; 13
 524:	e0 5c       	subi	r30, 0xC0	; 192
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	21 91       	ld	r18, Z+
 52a:	31 91       	ld	r19, Z+
 52c:	80 81       	ld	r24, Z
 52e:	91 81       	ldd	r25, Z+1	; 0x01
 530:	28 1b       	sub	r18, r24
 532:	39 0b       	sbc	r19, r25
 534:	2f 73       	andi	r18, 0x3F	; 63
 536:	30 70       	andi	r19, 0x00	; 0
}
 538:	c9 01       	movw	r24, r18
 53a:	08 95       	ret

0000053c <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 53c:	dc 01       	movw	r26, r24
 53e:	1c 96       	adiw	r26, 0x0c	; 12
 540:	ed 91       	ld	r30, X+
 542:	fc 91       	ld	r31, X
 544:	1d 97       	sbiw	r26, 0x0d	; 13
 546:	e0 5c       	subi	r30, 0xC0	; 192
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	20 81       	ld	r18, Z
 54c:	31 81       	ldd	r19, Z+1	; 0x01
 54e:	e0 54       	subi	r30, 0x40	; 64
 550:	f0 40       	sbci	r31, 0x00	; 0
 552:	df 01       	movw	r26, r30
 554:	ae 5b       	subi	r26, 0xBE	; 190
 556:	bf 4f       	sbci	r27, 0xFF	; 255
 558:	8d 91       	ld	r24, X+
 55a:	9c 91       	ld	r25, X
 55c:	11 97       	sbiw	r26, 0x01	; 1
 55e:	28 17       	cp	r18, r24
 560:	39 07       	cpc	r19, r25
 562:	19 f4       	brne	.+6      	; 0x56a <HardwareSerial::peek()+0x2e>
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	3f ef       	ldi	r19, 0xFF	; 255
 568:	07 c0       	rjmp	.+14     	; 0x578 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 56a:	8d 91       	ld	r24, X+
 56c:	9c 91       	ld	r25, X
 56e:	e8 0f       	add	r30, r24
 570:	f9 1f       	adc	r31, r25
 572:	80 81       	ld	r24, Z
 574:	28 2f       	mov	r18, r24
 576:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 578:	c9 01       	movw	r24, r18
 57a:	08 95       	ret

0000057c <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 57c:	dc 01       	movw	r26, r24
 57e:	1c 96       	adiw	r26, 0x0c	; 12
 580:	ed 91       	ld	r30, X+
 582:	fc 91       	ld	r31, X
 584:	1d 97       	sbiw	r26, 0x0d	; 13
 586:	e0 5c       	subi	r30, 0xC0	; 192
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	20 81       	ld	r18, Z
 58c:	31 81       	ldd	r19, Z+1	; 0x01
 58e:	e0 54       	subi	r30, 0x40	; 64
 590:	f0 40       	sbci	r31, 0x00	; 0
 592:	df 01       	movw	r26, r30
 594:	ae 5b       	subi	r26, 0xBE	; 190
 596:	bf 4f       	sbci	r27, 0xFF	; 255
 598:	8d 91       	ld	r24, X+
 59a:	9c 91       	ld	r25, X
 59c:	11 97       	sbiw	r26, 0x01	; 1
 59e:	28 17       	cp	r18, r24
 5a0:	39 07       	cpc	r19, r25
 5a2:	19 f4       	brne	.+6      	; 0x5aa <HardwareSerial::read()+0x2e>
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	3f ef       	ldi	r19, 0xFF	; 255
 5a8:	10 c0       	rjmp	.+32     	; 0x5ca <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 5aa:	8d 91       	ld	r24, X+
 5ac:	9c 91       	ld	r25, X
 5ae:	11 97       	sbiw	r26, 0x01	; 1
 5b0:	e8 0f       	add	r30, r24
 5b2:	f9 1f       	adc	r31, r25
 5b4:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 5b6:	8d 91       	ld	r24, X+
 5b8:	9c 91       	ld	r25, X
 5ba:	11 97       	sbiw	r26, 0x01	; 1
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	8f 73       	andi	r24, 0x3F	; 63
 5c0:	90 70       	andi	r25, 0x00	; 0
 5c2:	11 96       	adiw	r26, 0x01	; 1
 5c4:	9c 93       	st	X, r25
 5c6:	8e 93       	st	-X, r24
    return c;
 5c8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 5ca:	c9 01       	movw	r24, r18
 5cc:	08 95       	ret

000005ce <HardwareSerial::flush()>:

void HardwareSerial::flush()
 5ce:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 5d0:	91 96       	adiw	r26, 0x21	; 33
 5d2:	8c 91       	ld	r24, X
 5d4:	91 97       	sbiw	r26, 0x21	; 33
 5d6:	88 23       	and	r24, r24
 5d8:	39 f0       	breq	.+14     	; 0x5e8 <HardwareSerial::flush()+0x1a>
 5da:	54 96       	adiw	r26, 0x14	; 20
 5dc:	ed 91       	ld	r30, X+
 5de:	fc 91       	ld	r31, X
 5e0:	55 97       	sbiw	r26, 0x15	; 21
 5e2:	80 81       	ld	r24, Z
 5e4:	86 ff       	sbrs	r24, 6
 5e6:	f9 cf       	rjmp	.-14     	; 0x5da <HardwareSerial::flush()+0xc>
  transmitting = false;
 5e8:	91 96       	adiw	r26, 0x21	; 33
 5ea:	1c 92       	st	X, r1
}
 5ec:	08 95       	ret

000005ee <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 5f4:	ee 85       	ldd	r30, Y+14	; 0x0e
 5f6:	ff 85       	ldd	r31, Y+15	; 0x0f
 5f8:	e0 5c       	subi	r30, 0xC0	; 192
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	20 81       	ld	r18, Z
 5fe:	31 81       	ldd	r19, Z+1	; 0x01
 600:	e0 54       	subi	r30, 0x40	; 64
 602:	f0 40       	sbci	r31, 0x00	; 0
 604:	2f 5f       	subi	r18, 0xFF	; 255
 606:	3f 4f       	sbci	r19, 0xFF	; 255
 608:	2f 73       	andi	r18, 0x3F	; 63
 60a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 60c:	df 01       	movw	r26, r30
 60e:	ae 5b       	subi	r26, 0xBE	; 190
 610:	bf 4f       	sbci	r27, 0xFF	; 255
 612:	8d 91       	ld	r24, X+
 614:	9c 91       	ld	r25, X
 616:	11 97       	sbiw	r26, 0x01	; 1
 618:	28 17       	cp	r18, r24
 61a:	39 07       	cpc	r19, r25
 61c:	d1 f3       	breq	.-12     	; 0x612 <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 61e:	e0 5c       	subi	r30, 0xC0	; 192
 620:	ff 4f       	sbci	r31, 0xFF	; 255
 622:	80 81       	ld	r24, Z
 624:	91 81       	ldd	r25, Z+1	; 0x01
 626:	e0 54       	subi	r30, 0x40	; 64
 628:	f0 40       	sbci	r31, 0x00	; 0
 62a:	e8 0f       	add	r30, r24
 62c:	f9 1f       	adc	r31, r25
 62e:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 630:	ee 85       	ldd	r30, Y+14	; 0x0e
 632:	ff 85       	ldd	r31, Y+15	; 0x0f
 634:	e0 5c       	subi	r30, 0xC0	; 192
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	31 83       	std	Z+1, r19	; 0x01
 63a:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 63c:	ee 89       	ldd	r30, Y+22	; 0x16
 63e:	ff 89       	ldd	r31, Y+23	; 0x17
 640:	20 81       	ld	r18, Z
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0f 8c       	ldd	r0, Y+31	; 0x1f
 648:	02 c0       	rjmp	.+4      	; 0x64e <HardwareSerial::write(unsigned char)+0x60>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	0a 94       	dec	r0
 650:	e2 f7       	brpl	.-8      	; 0x64a <HardwareSerial::write(unsigned char)+0x5c>
 652:	28 2b       	or	r18, r24
 654:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 65a:	ec 89       	ldd	r30, Y+20	; 0x14
 65c:	fd 89       	ldd	r31, Y+21	; 0x15
 65e:	80 81       	ld	r24, Z
 660:	80 64       	ori	r24, 0x40	; 64
 662:	80 83       	st	Z, r24
  
  return 1;
}
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <global constructors keyed to rx_buffer>:
 66e:	10 92 a3 01 	sts	0x01A3, r1
 672:	10 92 a2 01 	sts	0x01A2, r1
 676:	88 ee       	ldi	r24, 0xE8	; 232
 678:	93 e0       	ldi	r25, 0x03	; 3
 67a:	a0 e0       	ldi	r26, 0x00	; 0
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	80 93 a4 01 	sts	0x01A4, r24
 682:	90 93 a5 01 	sts	0x01A5, r25
 686:	a0 93 a6 01 	sts	0x01A6, r26
 68a:	b0 93 a7 01 	sts	0x01A7, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 68e:	84 e0       	ldi	r24, 0x04	; 4
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	90 93 a1 01 	sts	0x01A1, r25
 696:	80 93 a0 01 	sts	0x01A0, r24
{
  _rx_buffer = rx_buffer;
 69a:	88 e1       	ldi	r24, 0x18	; 24
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	90 93 ad 01 	sts	0x01AD, r25
 6a2:	80 93 ac 01 	sts	0x01AC, r24
  _tx_buffer = tx_buffer;
 6a6:	8c e5       	ldi	r24, 0x5C	; 92
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	90 93 af 01 	sts	0x01AF, r25
 6ae:	80 93 ae 01 	sts	0x01AE, r24
  _ubrrh = ubrrh;
 6b2:	85 ec       	ldi	r24, 0xC5	; 197
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	90 93 b1 01 	sts	0x01B1, r25
 6ba:	80 93 b0 01 	sts	0x01B0, r24
  _ubrrl = ubrrl;
 6be:	84 ec       	ldi	r24, 0xC4	; 196
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	90 93 b3 01 	sts	0x01B3, r25
 6c6:	80 93 b2 01 	sts	0x01B2, r24
  _ucsra = ucsra;
 6ca:	80 ec       	ldi	r24, 0xC0	; 192
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	90 93 b5 01 	sts	0x01B5, r25
 6d2:	80 93 b4 01 	sts	0x01B4, r24
  _ucsrb = ucsrb;
 6d6:	81 ec       	ldi	r24, 0xC1	; 193
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	90 93 b7 01 	sts	0x01B7, r25
 6de:	80 93 b6 01 	sts	0x01B6, r24
  _ucsrc = ucsrc;
 6e2:	82 ec       	ldi	r24, 0xC2	; 194
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	90 93 b9 01 	sts	0x01B9, r25
 6ea:	80 93 b8 01 	sts	0x01B8, r24
  _udr = udr;
 6ee:	86 ec       	ldi	r24, 0xC6	; 198
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	90 93 bb 01 	sts	0x01BB, r25
 6f6:	80 93 ba 01 	sts	0x01BA, r24
  _rxen = rxen;
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	80 93 bc 01 	sts	0x01BC, r24
  _txen = txen;
 700:	83 e0       	ldi	r24, 0x03	; 3
 702:	80 93 bd 01 	sts	0x01BD, r24
  _rxcie = rxcie;
 706:	87 e0       	ldi	r24, 0x07	; 7
 708:	80 93 be 01 	sts	0x01BE, r24
  _udrie = udrie;
 70c:	85 e0       	ldi	r24, 0x05	; 5
 70e:	80 93 bf 01 	sts	0x01BF, r24
  _u2x = u2x;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 c0 01 	sts	0x01C0, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 718:	08 95       	ret

0000071a <main>:
#include <Arduino.h>

int main(void)
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
{
	init();
 71e:	0e 94 0e 04 	call	0x81c	; 0x81c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 722:	0e 94 a1 00 	call	0x142	; 0x142 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 726:	c8 eb       	ldi	r28, 0xB8	; 184
 728:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 72a:	0e 94 8c 00 	call	0x118	; 0x118 <loop>
		if (serialEventRun) serialEventRun();
 72e:	20 97       	sbiw	r28, 0x00	; 0
 730:	e1 f3       	breq	.-8      	; 0x72a <main+0x10>
 732:	0e 94 b8 01 	call	0x370	; 0x370 <serialEventRun()>
 736:	f9 cf       	rjmp	.-14     	; 0x72a <main+0x10>

00000738 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	7c 01       	movw	r14, r24
 74a:	6b 01       	movw	r12, r22
 74c:	8a 01       	movw	r16, r20
 74e:	c0 e0       	ldi	r28, 0x00	; 0
 750:	d0 e0       	ldi	r29, 0x00	; 0
 752:	0f c0       	rjmp	.+30     	; 0x772 <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 754:	d6 01       	movw	r26, r12
 756:	6d 91       	ld	r22, X+
 758:	6d 01       	movw	r12, r26
 75a:	d7 01       	movw	r26, r14
 75c:	ed 91       	ld	r30, X+
 75e:	fc 91       	ld	r31, X
 760:	01 90       	ld	r0, Z+
 762:	f0 81       	ld	r31, Z
 764:	e0 2d       	mov	r30, r0
 766:	c7 01       	movw	r24, r14
 768:	09 95       	icall
 76a:	c8 0f       	add	r28, r24
 76c:	d9 1f       	adc	r29, r25
 76e:	01 50       	subi	r16, 0x01	; 1
 770:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 772:	01 15       	cp	r16, r1
 774:	11 05       	cpc	r17, r1
 776:	71 f7       	brne	.-36     	; 0x754 <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 778:	ce 01       	movw	r24, r28
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	ff 90       	pop	r15
 784:	ef 90       	pop	r14
 786:	df 90       	pop	r13
 788:	cf 90       	pop	r12
 78a:	08 95       	ret

0000078c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	3f 93       	push	r19
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	af 93       	push	r26
 7a0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 7a2:	80 91 c6 01 	lds	r24, 0x01C6
 7a6:	90 91 c7 01 	lds	r25, 0x01C7
 7aa:	a0 91 c8 01 	lds	r26, 0x01C8
 7ae:	b0 91 c9 01 	lds	r27, 0x01C9
	unsigned char f = timer0_fract;
 7b2:	30 91 ca 01 	lds	r19, 0x01CA

	m += MILLIS_INC;
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	a1 1d       	adc	r26, r1
 7ba:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 7bc:	23 2f       	mov	r18, r19
 7be:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 7c0:	2d 37       	cpi	r18, 0x7D	; 125
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__vector_16+0x40>
		f -= FRACT_MAX;
 7c4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	a1 1d       	adc	r26, r1
 7ca:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 7cc:	20 93 ca 01 	sts	0x01CA, r18
	timer0_millis = m;
 7d0:	80 93 c6 01 	sts	0x01C6, r24
 7d4:	90 93 c7 01 	sts	0x01C7, r25
 7d8:	a0 93 c8 01 	sts	0x01C8, r26
 7dc:	b0 93 c9 01 	sts	0x01C9, r27
	timer0_overflow_count++;
 7e0:	80 91 c2 01 	lds	r24, 0x01C2
 7e4:	90 91 c3 01 	lds	r25, 0x01C3
 7e8:	a0 91 c4 01 	lds	r26, 0x01C4
 7ec:	b0 91 c5 01 	lds	r27, 0x01C5
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	a1 1d       	adc	r26, r1
 7f4:	b1 1d       	adc	r27, r1
 7f6:	80 93 c2 01 	sts	0x01C2, r24
 7fa:	90 93 c3 01 	sts	0x01C3, r25
 7fe:	a0 93 c4 01 	sts	0x01C4, r26
 802:	b0 93 c5 01 	sts	0x01C5, r27
}
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	3f 91       	pop	r19
 810:	2f 91       	pop	r18
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 81c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 81e:	84 b5       	in	r24, 0x24	; 36
 820:	82 60       	ori	r24, 0x02	; 2
 822:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 824:	84 b5       	in	r24, 0x24	; 36
 826:	81 60       	ori	r24, 0x01	; 1
 828:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 82a:	85 b5       	in	r24, 0x25	; 37
 82c:	82 60       	ori	r24, 0x02	; 2
 82e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 830:	85 b5       	in	r24, 0x25	; 37
 832:	81 60       	ori	r24, 0x01	; 1
 834:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 836:	ee e6       	ldi	r30, 0x6E	; 110
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	81 60       	ori	r24, 0x01	; 1
 83e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 840:	e1 e8       	ldi	r30, 0x81	; 129
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 846:	80 81       	ld	r24, Z
 848:	82 60       	ori	r24, 0x02	; 2
 84a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 84c:	80 81       	ld	r24, Z
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 852:	e0 e8       	ldi	r30, 0x80	; 128
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	81 60       	ori	r24, 0x01	; 1
 85a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 85c:	e1 eb       	ldi	r30, 0xB1	; 177
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	84 60       	ori	r24, 0x04	; 4
 864:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 866:	e0 eb       	ldi	r30, 0xB0	; 176
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	81 60       	ori	r24, 0x01	; 1
 86e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 870:	ea e7       	ldi	r30, 0x7A	; 122
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	84 60       	ori	r24, 0x04	; 4
 878:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 87a:	80 81       	ld	r24, Z
 87c:	82 60       	ori	r24, 0x02	; 2
 87e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 880:	80 81       	ld	r24, Z
 882:	81 60       	ori	r24, 0x01	; 1
 884:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 886:	80 81       	ld	r24, Z
 888:	80 68       	ori	r24, 0x80	; 128
 88a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 88c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 890:	08 95       	ret

00000892 <__udivmodsi4>:
 892:	a1 e2       	ldi	r26, 0x21	; 33
 894:	1a 2e       	mov	r1, r26
 896:	aa 1b       	sub	r26, r26
 898:	bb 1b       	sub	r27, r27
 89a:	fd 01       	movw	r30, r26
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <__udivmodsi4_ep>

0000089e <__udivmodsi4_loop>:
 89e:	aa 1f       	adc	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	ee 1f       	adc	r30, r30
 8a4:	ff 1f       	adc	r31, r31
 8a6:	a2 17       	cp	r26, r18
 8a8:	b3 07       	cpc	r27, r19
 8aa:	e4 07       	cpc	r30, r20
 8ac:	f5 07       	cpc	r31, r21
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__udivmodsi4_ep>
 8b0:	a2 1b       	sub	r26, r18
 8b2:	b3 0b       	sbc	r27, r19
 8b4:	e4 0b       	sbc	r30, r20
 8b6:	f5 0b       	sbc	r31, r21

000008b8 <__udivmodsi4_ep>:
 8b8:	66 1f       	adc	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	1a 94       	dec	r1
 8c2:	69 f7       	brne	.-38     	; 0x89e <__udivmodsi4_loop>
 8c4:	60 95       	com	r22
 8c6:	70 95       	com	r23
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	9b 01       	movw	r18, r22
 8ce:	ac 01       	movw	r20, r24
 8d0:	bd 01       	movw	r22, r26
 8d2:	cf 01       	movw	r24, r30
 8d4:	08 95       	ret

000008d6 <__tablejump2__>:
 8d6:	ee 0f       	add	r30, r30
 8d8:	ff 1f       	adc	r31, r31

000008da <__tablejump__>:
 8da:	05 90       	lpm	r0, Z+
 8dc:	f4 91       	lpm	r31, Z+
 8de:	e0 2d       	mov	r30, r0
 8e0:	09 94       	ijmp

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
