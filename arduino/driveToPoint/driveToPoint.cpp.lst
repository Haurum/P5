
C:\Users\frede\AppData\Local\Temp\build2308658183220842787.tmp\driveToPoint.cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001694  00001728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  0080011c  0080011c  00001744  2**0
                  ALLOC
  3 .debug_aranges 000005f8  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f07  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007258  00000000  00000000  00002c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014dd  00000000  00000000  00009e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004af5  00000000  00000000  0000b378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  0000fe70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001ab9  00000000  00000000  00010920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003a9f  00000000  00000000  000123d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0004caeb  00000000  00000000  00015e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  00062963  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
    TimerInitalized = false;
}
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
       4:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_1>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
       8:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_2>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
       c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      40:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_16>
      44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      48:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_18>
      4c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_19>
      50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b3 <port_to_mode_PGM>:
      b3:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000bd <port_to_output_PGM>:
      bd:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c7 <port_to_input_PGM>:
      c7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d1 <digital_pin_to_port_PGM>:
      d1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e1:	03 03 03 03                                         ....

000000e5 <digital_pin_to_bit_mask_PGM>:
      e5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f5:	04 08 10 20                                         ... 

000000f9 <digital_pin_to_timer_PGM>:
      f9:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     109:	00 00 00 00 00                                      .....

0000010e <__ctors_start>:
     10e:	c8 00       	.word	0x00c8	; ????
     110:	0f 03       	fmul	r16, r23
     112:	e4 07       	cpc	r30, r20

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d8 e0       	ldi	r29, 0x08	; 8
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e4 e9       	ldi	r30, 0x94	; 148
     128:	f6 e1       	ldi	r31, 0x16	; 22
     12a:	02 c0       	rjmp	.+4      	; 0x130 <.do_copy_data_start>

0000012c <.do_copy_data_loop>:
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0

00000130 <.do_copy_data_start>:
     130:	ac 31       	cpi	r26, 0x1C	; 28
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <.do_copy_data_loop>

00000136 <__do_clear_bss>:
     136:	11 e0       	ldi	r17, 0x01	; 1
     138:	ac e1       	ldi	r26, 0x1C	; 28
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	af 3e       	cpi	r26, 0xEF	; 239
     142:	b1 07       	cpc	r27, r17
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
     146:	11 e0       	ldi	r17, 0x01	; 1
     148:	c4 e1       	ldi	r28, 0x14	; 20
     14a:	d1 e0       	ldi	r29, 0x01	; 1
     14c:	04 c0       	rjmp	.+8      	; 0x156 <.do_global_ctors_start>

0000014e <.do_global_ctors_loop>:
     14e:	22 97       	sbiw	r28, 0x02	; 2
     150:	fe 01       	movw	r30, r28
     152:	0e 94 44 0b 	call	0x1688	; 0x1688 <__tablejump__>

00000156 <.do_global_ctors_start>:
     156:	ce 30       	cpi	r28, 0x0E	; 14
     158:	d1 07       	cpc	r29, r17
     15a:	c9 f7       	brne	.-14     	; 0x14e <.do_global_ctors_loop>
     15c:	0e 94 3a 08 	call	0x1074	; 0x1074 <main>
     160:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <_exit>

00000164 <__bad_interrupt>:
     164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <incrementLeft()>:
    exit(0);
  }
}

void incrementLeft(){
  leftTotal++;
     168:	80 91 1c 01 	lds	r24, 0x011C
     16c:	90 91 1d 01 	lds	r25, 0x011D
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	90 93 1d 01 	sts	0x011D, r25
     176:	80 93 1c 01 	sts	0x011C, r24
}
     17a:	08 95       	ret

0000017c <incrementRight()>:

void incrementRight(){
  rightTotal++;
     17c:	80 91 1e 01 	lds	r24, 0x011E
     180:	90 91 1f 01 	lds	r25, 0x011F
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	90 93 1f 01 	sts	0x011F, r25
     18a:	80 93 1e 01 	sts	0x011E, r24
}
     18e:	08 95       	ret

00000190 <global constructors keyed to leftTotal>:
int leftTemp, rightTemp, goalX = 230, goalY = 330, loopcount = 0, signalCount = 0;

#include <AFMotor.h>
#include <Math.h>

AF_DCMotor motorLeft(1);
     190:	82 e3       	ldi	r24, 0x32	; 50
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	42 e0       	ldi	r20, 0x02	; 2
     198:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)>
AF_DCMotor motorRight(2);
     19c:	84 e3       	ldi	r24, 0x34	; 52
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	62 e0       	ldi	r22, 0x02	; 2
     1a2:	42 e0       	ldi	r20, 0x02	; 2
     1a4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)>
  leftTotal++;
}

void incrementRight(){
  rightTotal++;
}
     1a8:	08 95       	ret

000001aa <stopIfAtGoal()>:
    motorLeft.run(FORWARD);
    motorRight.run(FORWARD);
  }
}

void stopIfAtGoal(){
     1aa:	6f 92       	push	r6
     1ac:	7f 92       	push	r7
     1ae:	8f 92       	push	r8
     1b0:	9f 92       	push	r9
     1b2:	af 92       	push	r10
     1b4:	bf 92       	push	r11
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
  if(posX <= goalX + margin && posX >= goalX - margin && posY <= goalY + margin && posY >= goalY - margin){
     1c2:	60 90 26 01 	lds	r6, 0x0126
     1c6:	70 90 27 01 	lds	r7, 0x0127
     1ca:	80 90 28 01 	lds	r8, 0x0128
     1ce:	90 90 29 01 	lds	r9, 0x0129
     1d2:	a0 90 04 01 	lds	r10, 0x0104
     1d6:	b0 90 05 01 	lds	r11, 0x0105
     1da:	c0 90 06 01 	lds	r12, 0x0106
     1de:	d0 90 07 01 	lds	r13, 0x0107
     1e2:	e0 90 00 01 	lds	r14, 0x0100
     1e6:	f0 90 01 01 	lds	r15, 0x0101
     1ea:	00 91 02 01 	lds	r16, 0x0102
     1ee:	10 91 03 01 	lds	r17, 0x0103
     1f2:	c6 01       	movw	r24, r12
     1f4:	b5 01       	movw	r22, r10
     1f6:	a8 01       	movw	r20, r16
     1f8:	97 01       	movw	r18, r14
     1fa:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__addsf3>
     1fe:	9b 01       	movw	r18, r22
     200:	ac 01       	movw	r20, r24
     202:	c4 01       	movw	r24, r8
     204:	b3 01       	movw	r22, r6
     206:	0e 94 00 09 	call	0x1200	; 0x1200 <__cmpsf2>
     20a:	18 16       	cp	r1, r24
     20c:	0c f4       	brge	.+2      	; 0x210 <stopIfAtGoal()+0x66>
     20e:	4f c0       	rjmp	.+158    	; 0x2ae <stopIfAtGoal()+0x104>
     210:	c6 01       	movw	r24, r12
     212:	b5 01       	movw	r22, r10
     214:	a8 01       	movw	r20, r16
     216:	97 01       	movw	r18, r14
     218:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     21c:	9b 01       	movw	r18, r22
     21e:	ac 01       	movw	r20, r24
     220:	c4 01       	movw	r24, r8
     222:	b3 01       	movw	r22, r6
     224:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     228:	88 23       	and	r24, r24
     22a:	0c f4       	brge	.+2      	; 0x22e <stopIfAtGoal()+0x84>
     22c:	40 c0       	rjmp	.+128    	; 0x2ae <stopIfAtGoal()+0x104>
     22e:	60 90 2a 01 	lds	r6, 0x012A
     232:	70 90 2b 01 	lds	r7, 0x012B
     236:	80 90 2c 01 	lds	r8, 0x012C
     23a:	90 90 2d 01 	lds	r9, 0x012D
     23e:	a0 90 08 01 	lds	r10, 0x0108
     242:	b0 90 09 01 	lds	r11, 0x0109
     246:	c0 90 0a 01 	lds	r12, 0x010A
     24a:	d0 90 0b 01 	lds	r13, 0x010B
     24e:	c6 01       	movw	r24, r12
     250:	b5 01       	movw	r22, r10
     252:	a8 01       	movw	r20, r16
     254:	97 01       	movw	r18, r14
     256:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__addsf3>
     25a:	9b 01       	movw	r18, r22
     25c:	ac 01       	movw	r20, r24
     25e:	c4 01       	movw	r24, r8
     260:	b3 01       	movw	r22, r6
     262:	0e 94 00 09 	call	0x1200	; 0x1200 <__cmpsf2>
     266:	18 16       	cp	r1, r24
     268:	14 f1       	brlt	.+68     	; 0x2ae <stopIfAtGoal()+0x104>
     26a:	c6 01       	movw	r24, r12
     26c:	b5 01       	movw	r22, r10
     26e:	a8 01       	movw	r20, r16
     270:	97 01       	movw	r18, r14
     272:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     276:	9b 01       	movw	r18, r22
     278:	ac 01       	movw	r20, r24
     27a:	c4 01       	movw	r24, r8
     27c:	b3 01       	movw	r22, r6
     27e:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     282:	88 23       	and	r24, r24
     284:	a4 f0       	brlt	.+40     	; 0x2ae <stopIfAtGoal()+0x104>
    motorLeft.run(RELEASE);
     286:	82 e3       	ldi	r24, 0x32	; 50
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	64 e0       	ldi	r22, 0x04	; 4
     28c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
    motorRight.run(RELEASE);
     290:	84 e3       	ldi	r24, 0x34	; 52
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
    delay(50);
     29a:	62 e3       	ldi	r22, 0x32	; 50
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 02 05 	call	0xa04	; 0xa04 <delay>
    exit(0);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 48 0b 	call	0x1690	; 0x1690 <_exit>
  }
}
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
     2bc:	af 90       	pop	r10
     2be:	9f 90       	pop	r9
     2c0:	8f 90       	pop	r8
     2c2:	7f 90       	pop	r7
     2c4:	6f 90       	pop	r6
     2c6:	08 95       	ret

000002c8 <driveTowardsGoal()>:
  posX += (dist * sin(heading));
  posY += (dist * cos(heading));
  heading += (atan((deltaRight - deltaLeft) / WHEELDIST));
}

void driveTowardsGoal(){
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
  double deltaX = goalX - posX;
  double deltaY = goalY - posY;
  double goalHeading = atan(deltaX/deltaY);
     2d0:	60 91 04 01 	lds	r22, 0x0104
     2d4:	70 91 05 01 	lds	r23, 0x0105
     2d8:	80 91 06 01 	lds	r24, 0x0106
     2dc:	90 91 07 01 	lds	r25, 0x0107
     2e0:	20 91 26 01 	lds	r18, 0x0126
     2e4:	30 91 27 01 	lds	r19, 0x0127
     2e8:	40 91 28 01 	lds	r20, 0x0128
     2ec:	50 91 29 01 	lds	r21, 0x0129
     2f0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     2f4:	7b 01       	movw	r14, r22
     2f6:	8c 01       	movw	r16, r24
     2f8:	60 91 08 01 	lds	r22, 0x0108
     2fc:	70 91 09 01 	lds	r23, 0x0109
     300:	80 91 0a 01 	lds	r24, 0x010A
     304:	90 91 0b 01 	lds	r25, 0x010B
     308:	20 91 2a 01 	lds	r18, 0x012A
     30c:	30 91 2b 01 	lds	r19, 0x012B
     310:	40 91 2c 01 	lds	r20, 0x012C
     314:	50 91 2d 01 	lds	r21, 0x012D
     318:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     31c:	9b 01       	movw	r18, r22
     31e:	ac 01       	movw	r20, r24
     320:	c8 01       	movw	r24, r16
     322:	b7 01       	movw	r22, r14
     324:	0e 94 07 09 	call	0x120e	; 0x120e <__divsf3>
     328:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <atan>
  
  double deltaHeading = goalHeading - heading;
     32c:	20 91 22 01 	lds	r18, 0x0122
     330:	30 91 23 01 	lds	r19, 0x0123
     334:	40 91 24 01 	lds	r20, 0x0124
     338:	50 91 25 01 	lds	r21, 0x0125
     33c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     340:	7b 01       	movw	r14, r22
     342:	8c 01       	movw	r16, r24
  if(deltaHeading < -0.1){
     344:	2d ec       	ldi	r18, 0xCD	; 205
     346:	3c ec       	ldi	r19, 0xCC	; 204
     348:	4c ec       	ldi	r20, 0xCC	; 204
     34a:	5d eb       	ldi	r21, 0xBD	; 189
     34c:	0e 94 00 09 	call	0x1200	; 0x1200 <__cmpsf2>
     350:	88 23       	and	r24, r24
     352:	4c f4       	brge	.+18     	; 0x366 <driveTowardsGoal()+0x9e>
    motorLeft.run(FORWARD);
     354:	82 e3       	ldi	r24, 0x32	; 50
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
    motorRight.run(RELEASE);
     35e:	84 e3       	ldi	r24, 0x34	; 52
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	64 e0       	ldi	r22, 0x04	; 4
     364:	16 c0       	rjmp	.+44     	; 0x392 <driveTowardsGoal()+0xca>
  }else if(deltaHeading > 0.1){
     366:	c8 01       	movw	r24, r16
     368:	b7 01       	movw	r22, r14
     36a:	2d ec       	ldi	r18, 0xCD	; 205
     36c:	3c ec       	ldi	r19, 0xCC	; 204
     36e:	4c ec       	ldi	r20, 0xCC	; 204
     370:	5d e3       	ldi	r21, 0x3D	; 61
     372:	0e 94 88 0a 	call	0x1510	; 0x1510 <__gesf2>
     376:	18 16       	cp	r1, r24
     378:	24 f4       	brge	.+8      	; 0x382 <driveTowardsGoal()+0xba>
    motorLeft.run(RELEASE);
     37a:	82 e3       	ldi	r24, 0x32	; 50
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	64 e0       	ldi	r22, 0x04	; 4
     380:	03 c0       	rjmp	.+6      	; 0x388 <driveTowardsGoal()+0xc0>
    motorRight.run(FORWARD);
  }else{
    motorLeft.run(FORWARD);
     382:	82 e3       	ldi	r24, 0x32	; 50
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
    motorRight.run(FORWARD);
     38c:	84 e3       	ldi	r24, 0x34	; 52
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
  }
}
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	08 95       	ret

000003a0 <updatePosAndHead()>:
  
  updatePosAndHead();
  
}

void updatePosAndHead(){
     3a0:	2f 92       	push	r2
     3a2:	3f 92       	push	r3
     3a4:	4f 92       	push	r4
     3a6:	5f 92       	push	r5
     3a8:	6f 92       	push	r6
     3aa:	7f 92       	push	r7
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
  int currentLeft = leftTotal;
     3c0:	00 91 1c 01 	lds	r16, 0x011C
     3c4:	10 91 1d 01 	lds	r17, 0x011D
  int currentRight = rightTotal;
     3c8:	e0 90 1e 01 	lds	r14, 0x011E
     3cc:	f0 90 1f 01 	lds	r15, 0x011F
  double deltaLeft = (currentLeft - leftTemp) * DISTPRDEGREE;
     3d0:	80 91 2e 01 	lds	r24, 0x012E
     3d4:	90 91 2f 01 	lds	r25, 0x012F
     3d8:	b8 01       	movw	r22, r16
     3da:	68 1b       	sub	r22, r24
     3dc:	79 0b       	sbc	r23, r25
     3de:	88 27       	eor	r24, r24
     3e0:	77 fd       	sbrc	r23, 7
     3e2:	80 95       	com	r24
     3e4:	98 2f       	mov	r25, r24
     3e6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__floatsisf>
     3ea:	2d ed       	ldi	r18, 0xDD	; 221
     3ec:	35 e3       	ldi	r19, 0x35	; 53
     3ee:	4a ef       	ldi	r20, 0xFA	; 250
     3f0:	5e e3       	ldi	r21, 0x3E	; 62
     3f2:	0e 94 93 0a 	call	0x1526	; 0x1526 <__mulsf3>
     3f6:	1b 01       	movw	r2, r22
     3f8:	2c 01       	movw	r4, r24
  double deltaRight = (currentRight - rightTemp) * DISTPRDEGREE;
     3fa:	80 91 30 01 	lds	r24, 0x0130
     3fe:	90 91 31 01 	lds	r25, 0x0131
     402:	b7 01       	movw	r22, r14
     404:	68 1b       	sub	r22, r24
     406:	79 0b       	sbc	r23, r25
     408:	88 27       	eor	r24, r24
     40a:	77 fd       	sbrc	r23, 7
     40c:	80 95       	com	r24
     40e:	98 2f       	mov	r25, r24
     410:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__floatsisf>
     414:	2d ed       	ldi	r18, 0xDD	; 221
     416:	35 e3       	ldi	r19, 0x35	; 53
     418:	4a ef       	ldi	r20, 0xFA	; 250
     41a:	5e e3       	ldi	r21, 0x3E	; 62
     41c:	0e 94 93 0a 	call	0x1526	; 0x1526 <__mulsf3>
     420:	3b 01       	movw	r6, r22
     422:	4c 01       	movw	r8, r24
  leftTemp = currentLeft;
     424:	10 93 2f 01 	sts	0x012F, r17
     428:	00 93 2e 01 	sts	0x012E, r16
  rightTemp = currentRight;
     42c:	f0 92 31 01 	sts	0x0131, r15
     430:	e0 92 30 01 	sts	0x0130, r14
  double dist = (deltaLeft + deltaRight) / 2.0;
     434:	c2 01       	movw	r24, r4
     436:	b1 01       	movw	r22, r2
     438:	a4 01       	movw	r20, r8
     43a:	93 01       	movw	r18, r6
     43c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__addsf3>
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	5f e3       	ldi	r21, 0x3F	; 63
     448:	0e 94 93 0a 	call	0x1526	; 0x1526 <__mulsf3>
     44c:	5b 01       	movw	r10, r22
     44e:	6c 01       	movw	r12, r24
  posX += (dist * sin(heading));
     450:	e0 90 22 01 	lds	r14, 0x0122
     454:	f0 90 23 01 	lds	r15, 0x0123
     458:	00 91 24 01 	lds	r16, 0x0124
     45c:	10 91 25 01 	lds	r17, 0x0125
     460:	c8 01       	movw	r24, r16
     462:	b7 01       	movw	r22, r14
     464:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <sin>
     468:	9b 01       	movw	r18, r22
     46a:	ac 01       	movw	r20, r24
     46c:	c6 01       	movw	r24, r12
     46e:	b5 01       	movw	r22, r10
     470:	0e 94 93 0a 	call	0x1526	; 0x1526 <__mulsf3>
     474:	9b 01       	movw	r18, r22
     476:	ac 01       	movw	r20, r24
     478:	60 91 26 01 	lds	r22, 0x0126
     47c:	70 91 27 01 	lds	r23, 0x0127
     480:	80 91 28 01 	lds	r24, 0x0128
     484:	90 91 29 01 	lds	r25, 0x0129
     488:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__addsf3>
     48c:	60 93 26 01 	sts	0x0126, r22
     490:	70 93 27 01 	sts	0x0127, r23
     494:	80 93 28 01 	sts	0x0128, r24
     498:	90 93 29 01 	sts	0x0129, r25
  posY += (dist * cos(heading));
     49c:	c8 01       	movw	r24, r16
     49e:	b7 01       	movw	r22, r14
     4a0:	0e 94 04 09 	call	0x1208	; 0x1208 <cos>
     4a4:	9b 01       	movw	r18, r22
     4a6:	ac 01       	movw	r20, r24
     4a8:	c6 01       	movw	r24, r12
     4aa:	b5 01       	movw	r22, r10
     4ac:	0e 94 93 0a 	call	0x1526	; 0x1526 <__mulsf3>
     4b0:	9b 01       	movw	r18, r22
     4b2:	ac 01       	movw	r20, r24
     4b4:	60 91 2a 01 	lds	r22, 0x012A
     4b8:	70 91 2b 01 	lds	r23, 0x012B
     4bc:	80 91 2c 01 	lds	r24, 0x012C
     4c0:	90 91 2d 01 	lds	r25, 0x012D
     4c4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__addsf3>
     4c8:	60 93 2a 01 	sts	0x012A, r22
     4cc:	70 93 2b 01 	sts	0x012B, r23
     4d0:	80 93 2c 01 	sts	0x012C, r24
     4d4:	90 93 2d 01 	sts	0x012D, r25
  heading += (atan((deltaRight - deltaLeft) / WHEELDIST));
     4d8:	c4 01       	movw	r24, r8
     4da:	b3 01       	movw	r22, r6
     4dc:	a2 01       	movw	r20, r4
     4de:	91 01       	movw	r18, r2
     4e0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	48 ef       	ldi	r20, 0xF8	; 248
     4ea:	52 e4       	ldi	r21, 0x42	; 66
     4ec:	0e 94 07 09 	call	0x120e	; 0x120e <__divsf3>
     4f0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <atan>
     4f4:	9b 01       	movw	r18, r22
     4f6:	ac 01       	movw	r20, r24
     4f8:	c8 01       	movw	r24, r16
     4fa:	b7 01       	movw	r22, r14
     4fc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__addsf3>
     500:	60 93 22 01 	sts	0x0122, r22
     504:	70 93 23 01 	sts	0x0123, r23
     508:	80 93 24 01 	sts	0x0124, r24
     50c:	90 93 25 01 	sts	0x0125, r25
}
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	af 90       	pop	r10
     520:	9f 90       	pop	r9
     522:	8f 90       	pop	r8
     524:	7f 90       	pop	r7
     526:	6f 90       	pop	r6
     528:	5f 90       	pop	r5
     52a:	4f 90       	pop	r4
     52c:	3f 90       	pop	r3
     52e:	2f 90       	pop	r2
     530:	08 95       	ret

00000532 <loop>:
  rightTemp = rightTotal;
}

void loop() {
  
  stopIfAtGoal();
     532:	0e 94 d5 00 	call	0x1aa	; 0x1aa <stopIfAtGoal()>
  
  driveTowardsGoal();
     536:	0e 94 64 01 	call	0x2c8	; 0x2c8 <driveTowardsGoal()>
  
  delay(10);
     53a:	6a e0       	ldi	r22, 0x0A	; 10
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 02 05 	call	0xa04	; 0xa04 <delay>
  
  updatePosAndHead();
     546:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <updatePosAndHead()>
  
}
     54a:	08 95       	ret

0000054c <setup>:
#include <Math.h>

AF_DCMotor motorLeft(1);
AF_DCMotor motorRight(2);

void setup() {
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
  Serial.begin(9600);           // set up Serial library at 9600 bps
     554:	8d ec       	ldi	r24, 0xCD	; 205
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	55 e2       	ldi	r21, 0x25	; 37
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 b3 06 	call	0xd66	; 0xd66 <HardwareSerial::begin(unsigned long)>

  pinMode(LEFTENCODERPIN, INPUT);
     564:	84 e1       	ldi	r24, 0x14	; 20
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
  attachInterrupt(3, incrementLeft, CHANGE);
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	64 eb       	ldi	r22, 0xB4	; 180
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	0e 94 3d 04 	call	0x87a	; 0x87a <attachInterrupt>
  pinMode(RIGHTENCODERPIN, INPUT);
     57a:	85 e1       	ldi	r24, 0x15	; 21
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
  attachInterrupt(2, incrementRight, CHANGE);
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	6e eb       	ldi	r22, 0xBE	; 190
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0e 94 3d 04 	call	0x87a	; 0x87a <attachInterrupt>
  // turn on motor
  motorLeft.setSpeed(255);
     590:	02 e3       	ldi	r16, 0x32	; 50
     592:	11 e0       	ldi	r17, 0x01	; 1
     594:	c8 01       	movw	r24, r16
     596:	6f ef       	ldi	r22, 0xFF	; 255
     598:	0e 94 f7 02 	call	0x5ee	; 0x5ee <AF_DCMotor::setSpeed(unsigned char)>
  motorRight.setSpeed(255);
     59c:	84 e3       	ldi	r24, 0x34	; 52
     59e:	e8 2e       	mov	r14, r24
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	f8 2e       	mov	r15, r24
     5a4:	c7 01       	movw	r24, r14
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <AF_DCMotor::setSpeed(unsigned char)>


  motorLeft.run(RELEASE);
     5ac:	c8 01       	movw	r24, r16
     5ae:	64 e0       	ldi	r22, 0x04	; 4
     5b0:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
  motorLeftRun = false;
     5b4:	10 92 20 01 	sts	0x0120, r1
  motorRight.run(RELEASE);
     5b8:	c7 01       	movw	r24, r14
     5ba:	64 e0       	ldi	r22, 0x04	; 4
     5bc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <AF_DCMotor::run(unsigned char)>
  motorRightRun = false;
     5c0:	10 92 21 01 	sts	0x0121, r1

  leftTemp = leftTotal;
     5c4:	80 91 1c 01 	lds	r24, 0x011C
     5c8:	90 91 1d 01 	lds	r25, 0x011D
     5cc:	90 93 2f 01 	sts	0x012F, r25
     5d0:	80 93 2e 01 	sts	0x012E, r24
  rightTemp = rightTotal;
     5d4:	80 91 1e 01 	lds	r24, 0x011E
     5d8:	90 91 1f 01 	lds	r25, 0x011F
     5dc:	90 93 31 01 	sts	0x0131, r25
     5e0:	80 93 30 01 	sts	0x0130, r24
}
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	08 95       	ret

000005ee <AF_DCMotor::setSpeed(unsigned char)>:
    MC.latch_tx();
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
     5ee:	fc 01       	movw	r30, r24
  switch (motornum) {
     5f0:	e0 81       	ld	r30, Z
     5f2:	e2 30       	cpi	r30, 0x02	; 2
     5f4:	69 f0       	breq	.+26     	; 0x610 <AF_DCMotor::setSpeed(unsigned char)+0x22>
     5f6:	e3 30       	cpi	r30, 0x03	; 3
     5f8:	18 f4       	brcc	.+6      	; 0x600 <AF_DCMotor::setSpeed(unsigned char)+0x12>
     5fa:	e1 30       	cpi	r30, 0x01	; 1
     5fc:	79 f4       	brne	.+30     	; 0x61c <AF_DCMotor::setSpeed(unsigned char)+0x2e>
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <AF_DCMotor::setSpeed(unsigned char)+0x1c>
     600:	e3 30       	cpi	r30, 0x03	; 3
     602:	49 f0       	breq	.+18     	; 0x616 <AF_DCMotor::setSpeed(unsigned char)+0x28>
     604:	e4 30       	cpi	r30, 0x04	; 4
     606:	51 f4       	brne	.+20     	; 0x61c <AF_DCMotor::setSpeed(unsigned char)+0x2e>
     608:	08 c0       	rjmp	.+16     	; 0x61a <AF_DCMotor::setSpeed(unsigned char)+0x2c>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
     60a:	60 93 b3 00 	sts	0x00B3, r22
     60e:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
     610:	60 93 b4 00 	sts	0x00B4, r22
     614:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
     616:	67 bd       	out	0x27, r22	; 39
     618:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
     61a:	68 bd       	out	0x28, r22	; 40
     61c:	08 95       	ret

0000061e <global constructors keyed to microstepcurve>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
    TimerInitalized = false;
     61e:	10 92 36 01 	sts	0x0136, r1
  }

 
  MC.latch_tx();
  return currentstep;
}
     622:	08 95       	ret

00000624 <initPWM1(unsigned char)>:
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
     624:	e0 eb       	ldi	r30, 0xB0	; 176
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	90 81       	ld	r25, Z
     62a:	93 68       	ori	r25, 0x83	; 131
     62c:	90 83       	st	Z, r25
    TCCR2B = freq & 0x7;
     62e:	87 70       	andi	r24, 0x07	; 7
     630:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0;
     634:	10 92 b3 00 	sts	0x00B3, r1
    #endif
#else
   #error "This chip is not supported!"
#endif
    #if !defined(PIC32_USE_PIN9_FOR_M1_PWM) && !defined(PIC32_USE_PIN10_FOR_M1_PWM)
        pinMode(11, OUTPUT);
     638:	8b e0       	ldi	r24, 0x0B	; 11
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
    #endif
}
     640:	08 95       	ret

00000642 <initPWM2(unsigned char)>:
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
     642:	e0 eb       	ldi	r30, 0xB0	; 176
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	90 81       	ld	r25, Z
     648:	93 62       	ori	r25, 0x23	; 35
     64a:	90 83       	st	Z, r25
    TCCR2B = freq & 0x7;
     64c:	87 70       	andi	r24, 0x07	; 7
     64e:	80 93 b1 00 	sts	0x00B1, r24
    OCR2B = 0;
     652:	10 92 b4 00 	sts	0x00B4, r1
    OC1R = 0x0000;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
}
     65e:	08 95       	ret

00000660 <AFMotorController::latch_tx()>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
     664:	8c e0       	ldi	r24, 0x0C	; 12
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
     66c:	88 e0       	ldi	r24, 0x08	; 8
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>
     674:	c7 e0       	ldi	r28, 0x07	; 7
     676:	d0 e0       	ldi	r29, 0x00	; 0

  for (i=0; i<8; i++) {
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>

    if (latch_state & _BV(7-i)) {
     680:	80 91 37 01 	lds	r24, 0x0137
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0c 2e       	mov	r0, r28
     688:	02 c0       	rjmp	.+4      	; 0x68e <AFMotorController::latch_tx()+0x2e>
     68a:	95 95       	asr	r25
     68c:	87 95       	ror	r24
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <AFMotorController::latch_tx()+0x2a>
     692:	80 ff       	sbrs	r24, 0
     694:	03 c0       	rjmp	.+6      	; 0x69c <AFMotorController::latch_tx()+0x3c>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <AFMotorController::latch_tx()+0x40>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
     69c:	88 e0       	ldi	r24, 0x08	; 8
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>
     6ac:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	cf 3f       	cpi	r28, 0xFF	; 255
     6b2:	d8 07       	cpc	r29, r24
     6b4:	09 f7       	brne	.-62     	; 0x678 <AFMotorController::latch_tx()+0x18>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
     6b6:	8c e0       	ldi	r24, 0x0C	; 12
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <AF_DCMotor::run(unsigned char)>:
    initPWM4(freq);
    break;
  }
}

void AF_DCMotor::run(uint8_t cmd) {
     6c4:	fc 01       	movw	r30, r24
  uint8_t a, b;
  switch (motornum) {
     6c6:	e0 81       	ld	r30, Z
     6c8:	e2 30       	cpi	r30, 0x02	; 2
     6ca:	61 f0       	breq	.+24     	; 0x6e4 <AF_DCMotor::run(unsigned char)+0x20>
     6cc:	e3 30       	cpi	r30, 0x03	; 3
     6ce:	20 f4       	brcc	.+8      	; 0x6d8 <AF_DCMotor::run(unsigned char)+0x14>
     6d0:	e1 30       	cpi	r30, 0x01	; 1
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <AF_DCMotor::run(unsigned char)+0x12>
     6d4:	5d c0       	rjmp	.+186    	; 0x790 <AF_DCMotor::run(unsigned char)+0xcc>
     6d6:	09 c0       	rjmp	.+18     	; 0x6ea <AF_DCMotor::run(unsigned char)+0x26>
     6d8:	e3 30       	cpi	r30, 0x03	; 3
     6da:	51 f0       	breq	.+20     	; 0x6f0 <AF_DCMotor::run(unsigned char)+0x2c>
     6dc:	e4 30       	cpi	r30, 0x04	; 4
     6de:	09 f0       	breq	.+2      	; 0x6e2 <AF_DCMotor::run(unsigned char)+0x1e>
     6e0:	57 c0       	rjmp	.+174    	; 0x790 <AF_DCMotor::run(unsigned char)+0xcc>
     6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <AF_DCMotor::run(unsigned char)+0x32>
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	54 e0       	ldi	r21, 0x04	; 4
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <AF_DCMotor::run(unsigned char)+0x36>
     6ea:	42 e0       	ldi	r20, 0x02	; 2
     6ec:	53 e0       	ldi	r21, 0x03	; 3
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <AF_DCMotor::run(unsigned char)+0x36>
     6f0:	45 e0       	ldi	r20, 0x05	; 5
     6f2:	57 e0       	ldi	r21, 0x07	; 7
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <AF_DCMotor::run(unsigned char)+0x36>
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	56 e0       	ldi	r21, 0x06	; 6
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
     6fa:	62 30       	cpi	r22, 0x02	; 2
     6fc:	c1 f0       	breq	.+48     	; 0x72e <AF_DCMotor::run(unsigned char)+0x6a>
     6fe:	64 30       	cpi	r22, 0x04	; 4
     700:	79 f1       	breq	.+94     	; 0x760 <AF_DCMotor::run(unsigned char)+0x9c>
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	09 f0       	breq	.+2      	; 0x708 <AF_DCMotor::run(unsigned char)+0x44>
     706:	44 c0       	rjmp	.+136    	; 0x790 <AF_DCMotor::run(unsigned char)+0xcc>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	9c 01       	movw	r18, r24
     70e:	02 c0       	rjmp	.+4      	; 0x714 <AF_DCMotor::run(unsigned char)+0x50>
     710:	22 0f       	add	r18, r18
     712:	33 1f       	adc	r19, r19
     714:	5a 95       	dec	r21
     716:	e2 f7       	brpl	.-8      	; 0x710 <AF_DCMotor::run(unsigned char)+0x4c>
     718:	20 95       	com	r18
     71a:	02 c0       	rjmp	.+4      	; 0x720 <AF_DCMotor::run(unsigned char)+0x5c>
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	4a 95       	dec	r20
     722:	e2 f7       	brpl	.-8      	; 0x71c <AF_DCMotor::run(unsigned char)+0x58>
     724:	40 91 37 01 	lds	r20, 0x0137
     728:	48 2b       	or	r20, r24
     72a:	24 23       	and	r18, r20
     72c:	12 c0       	rjmp	.+36     	; 0x752 <AF_DCMotor::run(unsigned char)+0x8e>
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	9c 01       	movw	r18, r24
     734:	02 c0       	rjmp	.+4      	; 0x73a <AF_DCMotor::run(unsigned char)+0x76>
     736:	22 0f       	add	r18, r18
     738:	33 1f       	adc	r19, r19
     73a:	4a 95       	dec	r20
     73c:	e2 f7       	brpl	.-8      	; 0x736 <AF_DCMotor::run(unsigned char)+0x72>
     73e:	20 95       	com	r18
     740:	40 91 37 01 	lds	r20, 0x0137
     744:	24 23       	and	r18, r20
     746:	02 c0       	rjmp	.+4      	; 0x74c <AF_DCMotor::run(unsigned char)+0x88>
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	5a 95       	dec	r21
     74e:	e2 f7       	brpl	.-8      	; 0x748 <AF_DCMotor::run(unsigned char)+0x84>
     750:	28 2b       	or	r18, r24
     752:	20 93 37 01 	sts	0x0137, r18
    MC.latch_tx();
     756:	86 e3       	ldi	r24, 0x36	; 54
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>
     75e:	08 95       	ret
    break;
  case RELEASE:
    latch_state &= ~_BV(a);     // A and B both low
    latch_state &= ~_BV(b); 
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9c 01       	movw	r18, r24
     766:	02 c0       	rjmp	.+4      	; 0x76c <AF_DCMotor::run(unsigned char)+0xa8>
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	4a 95       	dec	r20
     76e:	e2 f7       	brpl	.-8      	; 0x768 <AF_DCMotor::run(unsigned char)+0xa4>
     770:	02 c0       	rjmp	.+4      	; 0x776 <AF_DCMotor::run(unsigned char)+0xb2>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	5a 95       	dec	r21
     778:	e2 f7       	brpl	.-8      	; 0x772 <AF_DCMotor::run(unsigned char)+0xae>
     77a:	82 2b       	or	r24, r18
     77c:	80 95       	com	r24
     77e:	20 91 37 01 	lds	r18, 0x0137
     782:	28 23       	and	r18, r24
     784:	20 93 37 01 	sts	0x0137, r18
    MC.latch_tx();
     788:	86 e3       	ldi	r24, 0x36	; 54
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>
     790:	08 95       	ret

00000792 <AFMotorController::enable()>:

AFMotorController::AFMotorController(void) {
    TimerInitalized = false;
}

void AFMotorController::enable(void) {
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	8c 01       	movw	r16, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
  pinMode(MOTORDATA, OUTPUT);
     7a8:	88 e0       	ldi	r24, 0x08	; 8
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
  pinMode(MOTORCLK, OUTPUT);
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>

  latch_state = 0;
     7b8:	10 92 37 01 	sts	0x0137, r1

  latch_tx();  // "reset"
     7bc:	c8 01       	movw	r24, r16
     7be:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
     7c2:	87 e0       	ldi	r24, 0x07	; 7
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <digitalWrite>
}
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	fc 01       	movw	r30, r24
     7d6:	16 2f       	mov	r17, r22
     7d8:	04 2f       	mov	r16, r20
  motornum = num;
     7da:	60 83       	st	Z, r22
  pwmfreq = freq;
     7dc:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 c9 03 	call	0x792	; 0x792 <AFMotorController::enable()>

  switch (num) {
     7e6:	12 30       	cpi	r17, 0x02	; 2
     7e8:	c1 f0       	breq	.+48     	; 0x81a <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x4a>
     7ea:	13 30       	cpi	r17, 0x03	; 3
     7ec:	20 f4       	brcc	.+8      	; 0x7f6 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x26>
     7ee:	11 30       	cpi	r17, 0x01	; 1
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x24>
     7f2:	40 c0       	rjmp	.+128    	; 0x874 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0xa4>
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x30>
     7f6:	13 30       	cpi	r17, 0x03	; 3
     7f8:	e9 f0       	breq	.+58     	; 0x834 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x64>
     7fa:	14 30       	cpi	r17, 0x04	; 4
     7fc:	d9 f5       	brne	.+118    	; 0x874 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0xa4>
     7fe:	29 c0       	rjmp	.+82     	; 0x852 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x82>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
     800:	80 91 37 01 	lds	r24, 0x0137
     804:	83 7f       	andi	r24, 0xF3	; 243
     806:	80 93 37 01 	sts	0x0137, r24
    MC.latch_tx();
     80a:	86 e3       	ldi	r24, 0x36	; 54
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>
    initPWM1(freq);
     812:	80 2f       	mov	r24, r16
     814:	0e 94 12 03 	call	0x624	; 0x624 <initPWM1(unsigned char)>
     818:	2d c0       	rjmp	.+90     	; 0x874 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0xa4>
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
     81a:	80 91 37 01 	lds	r24, 0x0137
     81e:	8d 7e       	andi	r24, 0xED	; 237
     820:	80 93 37 01 	sts	0x0137, r24
    MC.latch_tx();
     824:	86 e3       	ldi	r24, 0x36	; 54
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>
    initPWM2(freq);
     82c:	80 2f       	mov	r24, r16
     82e:	0e 94 21 03 	call	0x642	; 0x642 <initPWM2(unsigned char)>
     832:	20 c0       	rjmp	.+64     	; 0x874 <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0xa4>
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
     834:	80 91 37 01 	lds	r24, 0x0137
     838:	8f 75       	andi	r24, 0x5F	; 95
     83a:	80 93 37 01 	sts	0x0137, r24
    MC.latch_tx();
     83e:	86 e3       	ldi	r24, 0x36	; 54
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
     846:	84 b5       	in	r24, 0x24	; 36
     848:	83 68       	ori	r24, 0x83	; 131
     84a:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
     84c:	17 bc       	out	0x27, r1	; 39
    OC3RS = 0x0000;
    OC3R = 0x0000;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	0e c0       	rjmp	.+28     	; 0x86e <AF_DCMotor::AF_DCMotor(unsigned char, unsigned char)+0x9e>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
     852:	80 91 37 01 	lds	r24, 0x0137
     856:	8e 7b       	andi	r24, 0xBE	; 190
     858:	80 93 37 01 	sts	0x0137, r24
    MC.latch_tx();
     85c:	86 e3       	ldi	r24, 0x36	; 54
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 30 03 	call	0x660	; 0x660 <AFMotorController::latch_tx()>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
     864:	84 b5       	in	r24, 0x24	; 36
     866:	83 62       	ori	r24, 0x23	; 35
     868:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
     86a:	18 bc       	out	0x28, r1	; 40
    OC2RS = 0x0000;
    OC2R = 0x0000;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	0e 94 96 05 	call	0xb2c	; 0xb2c <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	00 f5       	brcc	.+64     	; 0x8be <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
     87e:	e8 2f       	mov	r30, r24
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e8 5c       	subi	r30, 0xC8	; 200
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	71 83       	std	Z+1, r23	; 0x01
     88c:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     88e:	88 23       	and	r24, r24
     890:	19 f0       	breq	.+6      	; 0x898 <attachInterrupt+0x1e>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	a1 f4       	brne	.+40     	; 0x8be <attachInterrupt+0x44>
     896:	08 c0       	rjmp	.+16     	; 0x8a8 <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     898:	80 91 69 00 	lds	r24, 0x0069
     89c:	8c 7f       	andi	r24, 0xFC	; 252
     89e:	84 2b       	or	r24, r20
     8a0:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     8a4:	e8 9a       	sbi	0x1d, 0	; 29
     8a6:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     8a8:	80 91 69 00 	lds	r24, 0x0069
     8ac:	44 0f       	add	r20, r20
     8ae:	55 1f       	adc	r21, r21
     8b0:	44 0f       	add	r20, r20
     8b2:	55 1f       	adc	r21, r21
     8b4:	83 7f       	andi	r24, 0xF3	; 243
     8b6:	84 2b       	or	r24, r20
     8b8:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     8bc:	e9 9a       	sbi	0x1d, 1	; 29
     8be:	08 95       	ret

000008c0 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8e2:	80 91 38 01 	lds	r24, 0x0138
     8e6:	90 91 39 01 	lds	r25, 0x0139
     8ea:	89 2b       	or	r24, r25
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     8ee:	e0 91 38 01 	lds	r30, 0x0138
     8f2:	f0 91 39 01 	lds	r31, 0x0139
     8f6:	09 95       	icall
}
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <__vector_2>:

SIGNAL(INT1_vect) {
     91a:	1f 92       	push	r1
     91c:	0f 92       	push	r0
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	0f 92       	push	r0
     922:	11 24       	eor	r1, r1
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     93c:	80 91 3a 01 	lds	r24, 0x013A
     940:	90 91 3b 01 	lds	r25, 0x013B
     944:	89 2b       	or	r24, r25
     946:	29 f0       	breq	.+10     	; 0x952 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     948:	e0 91 3a 01 	lds	r30, 0x013A
     94c:	f0 91 3b 01 	lds	r31, 0x013B
     950:	09 95       	icall
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     98a:	80 91 40 01 	lds	r24, 0x0140
     98e:	90 91 41 01 	lds	r25, 0x0141
     992:	a0 91 42 01 	lds	r26, 0x0142
     996:	b0 91 43 01 	lds	r27, 0x0143
	unsigned char f = timer0_fract;
     99a:	30 91 44 01 	lds	r19, 0x0144

	m += MILLIS_INC;
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	a1 1d       	adc	r26, r1
     9a2:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     9a4:	23 2f       	mov	r18, r19
     9a6:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     9a8:	2d 37       	cpi	r18, 0x7D	; 125
     9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__vector_16+0x40>
		f -= FRACT_MAX;
     9ac:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	a1 1d       	adc	r26, r1
     9b2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     9b4:	20 93 44 01 	sts	0x0144, r18
	timer0_millis = m;
     9b8:	80 93 40 01 	sts	0x0140, r24
     9bc:	90 93 41 01 	sts	0x0141, r25
     9c0:	a0 93 42 01 	sts	0x0142, r26
     9c4:	b0 93 43 01 	sts	0x0143, r27
	timer0_overflow_count++;
     9c8:	80 91 3c 01 	lds	r24, 0x013C
     9cc:	90 91 3d 01 	lds	r25, 0x013D
     9d0:	a0 91 3e 01 	lds	r26, 0x013E
     9d4:	b0 91 3f 01 	lds	r27, 0x013F
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	a1 1d       	adc	r26, r1
     9dc:	b1 1d       	adc	r27, r1
     9de:	80 93 3c 01 	sts	0x013C, r24
     9e2:	90 93 3d 01 	sts	0x013D, r25
     9e6:	a0 93 3e 01 	sts	0x013E, r26
     9ea:	b0 93 3f 01 	sts	0x013F, r27
}
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	0f 90       	pop	r0
     a00:	1f 90       	pop	r1
     a02:	18 95       	reti

00000a04 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     a04:	9b 01       	movw	r18, r22
     a06:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     a08:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     a0a:	f8 94       	cli
	m = timer0_overflow_count;
     a0c:	80 91 3c 01 	lds	r24, 0x013C
     a10:	90 91 3d 01 	lds	r25, 0x013D
     a14:	a0 91 3e 01 	lds	r26, 0x013E
     a18:	b0 91 3f 01 	lds	r27, 0x013F
#if defined(TCNT0)
	t = TCNT0;
     a1c:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a1e:	a8 9b       	sbis	0x15, 0	; 21
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <delay+0x28>
     a22:	6f 3f       	cpi	r22, 0xFF	; 255
     a24:	19 f0       	breq	.+6      	; 0xa2c <delay+0x28>
		m++;
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	a1 1d       	adc	r26, r1
     a2a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a2c:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     a2e:	ba 2f       	mov	r27, r26
     a30:	a9 2f       	mov	r26, r25
     a32:	98 2f       	mov	r25, r24
     a34:	88 27       	eor	r24, r24
     a36:	86 0f       	add	r24, r22
     a38:	91 1d       	adc	r25, r1
     a3a:	a1 1d       	adc	r26, r1
     a3c:	b1 1d       	adc	r27, r1
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	aa 1f       	adc	r26, r26
     a46:	bb 1f       	adc	r27, r27
     a48:	6a 95       	dec	r22
     a4a:	d1 f7       	brne	.-12     	; 0xa40 <delay+0x3c>
     a4c:	bc 01       	movw	r22, r24
     a4e:	2d c0       	rjmp	.+90     	; 0xaaa <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     a50:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     a52:	f8 94       	cli
	m = timer0_overflow_count;
     a54:	80 91 3c 01 	lds	r24, 0x013C
     a58:	90 91 3d 01 	lds	r25, 0x013D
     a5c:	a0 91 3e 01 	lds	r26, 0x013E
     a60:	b0 91 3f 01 	lds	r27, 0x013F
#if defined(TCNT0)
	t = TCNT0;
     a64:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a66:	a8 9b       	sbis	0x15, 0	; 21
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <delay+0x70>
     a6a:	ef 3f       	cpi	r30, 0xFF	; 255
     a6c:	19 f0       	breq	.+6      	; 0xa74 <delay+0x70>
		m++;
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	a1 1d       	adc	r26, r1
     a72:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a74:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
     a76:	ba 2f       	mov	r27, r26
     a78:	a9 2f       	mov	r26, r25
     a7a:	98 2f       	mov	r25, r24
     a7c:	88 27       	eor	r24, r24
     a7e:	8e 0f       	add	r24, r30
     a80:	91 1d       	adc	r25, r1
     a82:	a1 1d       	adc	r26, r1
     a84:	b1 1d       	adc	r27, r1
     a86:	e2 e0       	ldi	r30, 0x02	; 2
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	aa 1f       	adc	r26, r26
     a8e:	bb 1f       	adc	r27, r27
     a90:	ea 95       	dec	r30
     a92:	d1 f7       	brne	.-12     	; 0xa88 <delay+0x84>
     a94:	86 1b       	sub	r24, r22
     a96:	97 0b       	sbc	r25, r23
     a98:	88 5e       	subi	r24, 0xE8	; 232
     a9a:	93 40       	sbci	r25, 0x03	; 3
     a9c:	c8 f2       	brcs	.-78     	; 0xa50 <delay+0x4c>
			ms--;
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	30 40       	sbci	r19, 0x00	; 0
     aa2:	40 40       	sbci	r20, 0x00	; 0
     aa4:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
     aa6:	68 51       	subi	r22, 0x18	; 24
     aa8:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     aaa:	21 15       	cp	r18, r1
     aac:	31 05       	cpc	r19, r1
     aae:	41 05       	cpc	r20, r1
     ab0:	51 05       	cpc	r21, r1
     ab2:	71 f6       	brne	.-100    	; 0xa50 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     ab4:	08 95       	ret

00000ab6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ab6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ab8:	84 b5       	in	r24, 0x24	; 36
     aba:	82 60       	ori	r24, 0x02	; 2
     abc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     abe:	84 b5       	in	r24, 0x24	; 36
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ac4:	85 b5       	in	r24, 0x25	; 37
     ac6:	82 60       	ori	r24, 0x02	; 2
     ac8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     aca:	85 b5       	in	r24, 0x25	; 37
     acc:	81 60       	ori	r24, 0x01	; 1
     ace:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ad0:	ee e6       	ldi	r30, 0x6E	; 110
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ada:	e1 e8       	ldi	r30, 0x81	; 129
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ae0:	80 81       	ld	r24, Z
     ae2:	82 60       	ori	r24, 0x02	; 2
     ae4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ae6:	80 81       	ld	r24, Z
     ae8:	81 60       	ori	r24, 0x01	; 1
     aea:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     aec:	e0 e8       	ldi	r30, 0x80	; 128
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     af6:	e1 eb       	ldi	r30, 0xB1	; 177
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	84 60       	ori	r24, 0x04	; 4
     afe:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b00:	e0 eb       	ldi	r30, 0xB0	; 176
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	81 60       	ori	r24, 0x01	; 1
     b08:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     b0a:	ea e7       	ldi	r30, 0x7A	; 122
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	84 60       	ori	r24, 0x04	; 4
     b12:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     b14:	80 81       	ld	r24, Z
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     b1a:	80 81       	ld	r24, Z
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b20:	80 81       	ld	r24, Z
     b22:	80 68       	ori	r24, 0x80	; 128
     b24:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b26:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     b2a:	08 95       	ret

00000b2c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b30:	48 2f       	mov	r20, r24
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	ca 01       	movw	r24, r20
     b36:	8b 51       	subi	r24, 0x1B	; 27
     b38:	9f 4f       	sbci	r25, 0xFF	; 255
     b3a:	fc 01       	movw	r30, r24
     b3c:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
     b3e:	4f 52       	subi	r20, 0x2F	; 47
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	fa 01       	movw	r30, r20
     b44:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b46:	88 23       	and	r24, r24
     b48:	69 f1       	breq	.+90     	; 0xba4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	fc 01       	movw	r30, r24
     b52:	ed 54       	subi	r30, 0x4D	; 77
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	a5 91       	lpm	r26, Z+
     b58:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
     b5a:	fc 01       	movw	r30, r24
     b5c:	e3 54       	subi	r30, 0x43	; 67
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	c5 91       	lpm	r28, Z+
     b62:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
     b64:	66 23       	and	r22, r22
     b66:	51 f4       	brne	.+20     	; 0xb7c <pinMode+0x50>
		uint8_t oldSREG = SREG;
     b68:	2f b7       	in	r18, 0x3f	; 63
                cli();
     b6a:	f8 94       	cli
		*reg &= ~bit;
     b6c:	8c 91       	ld	r24, X
     b6e:	93 2f       	mov	r25, r19
     b70:	90 95       	com	r25
     b72:	89 23       	and	r24, r25
     b74:	8c 93       	st	X, r24
		*out &= ~bit;
     b76:	88 81       	ld	r24, Y
     b78:	89 23       	and	r24, r25
     b7a:	0b c0       	rjmp	.+22     	; 0xb92 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     b7c:	62 30       	cpi	r22, 0x02	; 2
     b7e:	61 f4       	brne	.+24     	; 0xb98 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     b80:	2f b7       	in	r18, 0x3f	; 63
                cli();
     b82:	f8 94       	cli
		*reg &= ~bit;
     b84:	8c 91       	ld	r24, X
     b86:	93 2f       	mov	r25, r19
     b88:	90 95       	com	r25
     b8a:	89 23       	and	r24, r25
     b8c:	8c 93       	st	X, r24
		*out |= bit;
     b8e:	88 81       	ld	r24, Y
     b90:	83 2b       	or	r24, r19
     b92:	88 83       	st	Y, r24
		SREG = oldSREG;
     b94:	2f bf       	out	0x3f, r18	; 63
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     b98:	9f b7       	in	r25, 0x3f	; 63
                cli();
     b9a:	f8 94       	cli
		*reg |= bit;
     b9c:	8c 91       	ld	r24, X
     b9e:	83 2b       	or	r24, r19
     ba0:	8c 93       	st	X, r24
		SREG = oldSREG;
     ba2:	9f bf       	out	0x3f, r25	; 63
	}
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     baa:	48 2f       	mov	r20, r24
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	ca 01       	movw	r24, r20
     bb0:	87 50       	subi	r24, 0x07	; 7
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	fc 01       	movw	r30, r24
     bb6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     bb8:	ca 01       	movw	r24, r20
     bba:	8b 51       	subi	r24, 0x1B	; 27
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	fc 01       	movw	r30, r24
     bc0:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
     bc2:	4f 52       	subi	r20, 0x2F	; 47
     bc4:	5f 4f       	sbci	r21, 0xFF	; 255
     bc6:	fa 01       	movw	r30, r20
     bc8:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     bca:	33 23       	and	r19, r19
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <digitalWrite+0x26>
     bce:	40 c0       	rjmp	.+128    	; 0xc50 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     bd0:	22 23       	and	r18, r18
     bd2:	51 f1       	breq	.+84     	; 0xc28 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     bd4:	23 30       	cpi	r18, 0x03	; 3
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <digitalWrite+0x4a>
     bd8:	24 30       	cpi	r18, 0x04	; 4
     bda:	28 f4       	brcc	.+10     	; 0xbe6 <digitalWrite+0x3c>
     bdc:	21 30       	cpi	r18, 0x01	; 1
     bde:	a1 f0       	breq	.+40     	; 0xc08 <digitalWrite+0x5e>
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	11 f5       	brne	.+68     	; 0xc28 <digitalWrite+0x7e>
     be4:	14 c0       	rjmp	.+40     	; 0xc0e <digitalWrite+0x64>
     be6:	26 30       	cpi	r18, 0x06	; 6
     be8:	b1 f0       	breq	.+44     	; 0xc16 <digitalWrite+0x6c>
     bea:	27 30       	cpi	r18, 0x07	; 7
     bec:	c1 f0       	breq	.+48     	; 0xc1e <digitalWrite+0x74>
     bee:	24 30       	cpi	r18, 0x04	; 4
     bf0:	d9 f4       	brne	.+54     	; 0xc28 <digitalWrite+0x7e>
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     bf4:	80 91 80 00 	lds	r24, 0x0080
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     bfc:	80 91 80 00 	lds	r24, 0x0080
     c00:	8f 7d       	andi	r24, 0xDF	; 223
     c02:	80 93 80 00 	sts	0x0080, r24
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c08:	84 b5       	in	r24, 0x24	; 36
     c0a:	8f 77       	andi	r24, 0x7F	; 127
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     c0e:	84 b5       	in	r24, 0x24	; 36
     c10:	8f 7d       	andi	r24, 0xDF	; 223
     c12:	84 bd       	out	0x24, r24	; 36
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     c16:	80 91 b0 00 	lds	r24, 0x00B0
     c1a:	8f 77       	andi	r24, 0x7F	; 127
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     c1e:	80 91 b0 00 	lds	r24, 0x00B0
     c22:	8f 7d       	andi	r24, 0xDF	; 223
     c24:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     c28:	e3 2f       	mov	r30, r19
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e3 54       	subi	r30, 0x43	; 67
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	a5 91       	lpm	r26, Z+
     c36:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
     c38:	2f b7       	in	r18, 0x3f	; 63
	cli();
     c3a:	f8 94       	cli

	if (val == LOW) {
     c3c:	66 23       	and	r22, r22
     c3e:	21 f4       	brne	.+8      	; 0xc48 <digitalWrite+0x9e>
		*out &= ~bit;
     c40:	8c 91       	ld	r24, X
     c42:	90 95       	com	r25
     c44:	89 23       	and	r24, r25
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <digitalWrite+0xa2>
	} else {
		*out |= bit;
     c48:	8c 91       	ld	r24, X
     c4a:	89 2b       	or	r24, r25
     c4c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     c4e:	2f bf       	out	0x3f, r18	; 63
     c50:	08 95       	ret

00000c52 <serialEvent()>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     c52:	08 95       	ret

00000c54 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	ef 93       	push	r30
     c6a:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     c6c:	80 91 c0 00 	lds	r24, 0x00C0
     c70:	82 fd       	sbrc	r24, 2
     c72:	1d c0       	rjmp	.+58     	; 0xcae <__vector_18+0x5a>
      unsigned char c = UDR0;
     c74:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c78:	20 91 85 01 	lds	r18, 0x0185
     c7c:	30 91 86 01 	lds	r19, 0x0186

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     c80:	2f 5f       	subi	r18, 0xFF	; 255
     c82:	3f 4f       	sbci	r19, 0xFF	; 255
     c84:	2f 73       	andi	r18, 0x3F	; 63
     c86:	30 70       	andi	r19, 0x00	; 0
     c88:	80 91 87 01 	lds	r24, 0x0187
     c8c:	90 91 88 01 	lds	r25, 0x0188
     c90:	28 17       	cp	r18, r24
     c92:	39 07       	cpc	r19, r25
     c94:	71 f0       	breq	.+28     	; 0xcb2 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     c96:	e0 91 85 01 	lds	r30, 0x0185
     c9a:	f0 91 86 01 	lds	r31, 0x0186
     c9e:	eb 5b       	subi	r30, 0xBB	; 187
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	40 83       	st	Z, r20
    buffer->head = i;
     ca4:	30 93 86 01 	sts	0x0186, r19
     ca8:	20 93 85 01 	sts	0x0185, r18
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     cae:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <serialEventRun()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     cca:	e0 91 d9 01 	lds	r30, 0x01D9
     cce:	f0 91 da 01 	lds	r31, 0x01DA
     cd2:	e0 5c       	subi	r30, 0xC0	; 192
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	81 91       	ld	r24, Z+
     cd8:	91 91       	ld	r25, Z+
     cda:	20 81       	ld	r18, Z
     cdc:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     cde:	82 1b       	sub	r24, r18
     ce0:	93 0b       	sbc	r25, r19
     ce2:	8f 73       	andi	r24, 0x3F	; 63
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	89 2b       	or	r24, r25
     ce8:	11 f0       	breq	.+4      	; 0xcee <serialEventRun()+0x24>
     cea:	0e 94 29 06 	call	0xc52	; 0xc52 <serialEvent()>
     cee:	08 95       	ret

00000cf0 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     d06:	20 91 c9 01 	lds	r18, 0x01C9
     d0a:	30 91 ca 01 	lds	r19, 0x01CA
     d0e:	80 91 cb 01 	lds	r24, 0x01CB
     d12:	90 91 cc 01 	lds	r25, 0x01CC
     d16:	28 17       	cp	r18, r24
     d18:	39 07       	cpc	r19, r25
     d1a:	31 f4       	brne	.+12     	; 0xd28 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     d1c:	80 91 c1 00 	lds	r24, 0x00C1
     d20:	8f 7d       	andi	r24, 0xDF	; 223
     d22:	80 93 c1 00 	sts	0x00C1, r24
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     d28:	e0 91 cb 01 	lds	r30, 0x01CB
     d2c:	f0 91 cc 01 	lds	r31, 0x01CC
     d30:	e7 57       	subi	r30, 0x77	; 119
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     d36:	80 91 cb 01 	lds	r24, 0x01CB
     d3a:	90 91 cc 01 	lds	r25, 0x01CC
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	8f 73       	andi	r24, 0x3F	; 63
     d42:	90 70       	andi	r25, 0x00	; 0
     d44:	90 93 cc 01 	sts	0x01CC, r25
     d48:	80 93 cb 01 	sts	0x01CB, r24
	
  #if defined(UDR0)
    UDR0 = c;
     d4c:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <HardwareSerial::begin(unsigned long)>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
     d7a:	7a 01       	movw	r14, r20
     d7c:	8b 01       	movw	r16, r22
     d7e:	dd 24       	eor	r13, r13
     d80:	40 30       	cpi	r20, 0x00	; 0
     d82:	81 ee       	ldi	r24, 0xE1	; 225
     d84:	58 07       	cpc	r21, r24
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	68 07       	cpc	r22, r24
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	78 07       	cpc	r23, r24
     d8e:	11 f0       	breq	.+4      	; 0xd94 <HardwareSerial::begin(unsigned long)+0x2e>
     d90:	dd 24       	eor	r13, r13
     d92:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	a9 2e       	mov	r10, r25
     d98:	b1 2c       	mov	r11, r1
     d9a:	ec 89       	ldd	r30, Y+20	; 0x14
     d9c:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     d9e:	dd 20       	and	r13, r13
     da0:	69 f0       	breq	.+26     	; 0xdbc <HardwareSerial::begin(unsigned long)+0x56>
    *_ucsra = 1 << _u2x;
     da2:	c5 01       	movw	r24, r10
     da4:	08 a0       	ldd	r0, Y+32	; 0x20
     da6:	02 c0       	rjmp	.+4      	; 0xdac <HardwareSerial::begin(unsigned long)+0x46>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <HardwareSerial::begin(unsigned long)+0x42>
     db0:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	79 e0       	ldi	r23, 0x09	; 9
     db6:	8d e3       	ldi	r24, 0x3D	; 61
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <HardwareSerial::begin(unsigned long)+0x60>
  } else {
    *_ucsra = 0;
     dbc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     dbe:	60 e8       	ldi	r22, 0x80	; 128
     dc0:	74 e8       	ldi	r23, 0x84	; 132
     dc2:	8e e1       	ldi	r24, 0x1E	; 30
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a8 01       	movw	r20, r16
     dc8:	97 01       	movw	r18, r14
     dca:	0e 94 20 0b 	call	0x1640	; 0x1640 <__udivmodsi4>
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	30 40       	sbci	r19, 0x00	; 0
     dd2:	40 40       	sbci	r20, 0x00	; 0
     dd4:	50 40       	sbci	r21, 0x00	; 0
     dd6:	56 95       	lsr	r21
     dd8:	47 95       	ror	r20
     dda:	37 95       	ror	r19
     ddc:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     dde:	80 e1       	ldi	r24, 0x10	; 16
     de0:	20 30       	cpi	r18, 0x00	; 0
     de2:	38 07       	cpc	r19, r24
     de4:	20 f0       	brcs	.+8      	; 0xdee <HardwareSerial::begin(unsigned long)+0x88>
     de6:	dd 20       	and	r13, r13
     de8:	11 f0       	breq	.+4      	; 0xdee <HardwareSerial::begin(unsigned long)+0x88>
     dea:	dd 24       	eor	r13, r13
     dec:	d6 cf       	rjmp	.-84     	; 0xd9a <HardwareSerial::begin(unsigned long)+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     dee:	e8 89       	ldd	r30, Y+16	; 0x10
     df0:	f9 89       	ldd	r31, Y+17	; 0x11
     df2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     df4:	ea 89       	ldd	r30, Y+18	; 0x12
     df6:	fb 89       	ldd	r31, Y+19	; 0x13
     df8:	20 83       	st	Z, r18

  transmitting = false;
     dfa:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     dfc:	ee 89       	ldd	r30, Y+22	; 0x16
     dfe:	ff 89       	ldd	r31, Y+23	; 0x17
     e00:	40 81       	ld	r20, Z
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	c9 01       	movw	r24, r18
     e08:	0c 8c       	ldd	r0, Y+28	; 0x1c
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <HardwareSerial::begin(unsigned long)+0xaa>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <HardwareSerial::begin(unsigned long)+0xa6>
     e14:	48 2b       	or	r20, r24
     e16:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     e18:	ee 89       	ldd	r30, Y+22	; 0x16
     e1a:	ff 89       	ldd	r31, Y+23	; 0x17
     e1c:	40 81       	ld	r20, Z
     e1e:	c9 01       	movw	r24, r18
     e20:	0d 8c       	ldd	r0, Y+29	; 0x1d
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <HardwareSerial::begin(unsigned long)+0xc2>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <HardwareSerial::begin(unsigned long)+0xbe>
     e2c:	48 2b       	or	r20, r24
     e2e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     e30:	ee 89       	ldd	r30, Y+22	; 0x16
     e32:	ff 89       	ldd	r31, Y+23	; 0x17
     e34:	40 81       	ld	r20, Z
     e36:	c9 01       	movw	r24, r18
     e38:	0e 8c       	ldd	r0, Y+30	; 0x1e
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <HardwareSerial::begin(unsigned long)+0xda>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <HardwareSerial::begin(unsigned long)+0xd6>
     e44:	48 2b       	or	r20, r24
     e46:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     e48:	ee 89       	ldd	r30, Y+22	; 0x16
     e4a:	ff 89       	ldd	r31, Y+23	; 0x17
     e4c:	80 81       	ld	r24, Z
     e4e:	0f 8c       	ldd	r0, Y+31	; 0x1f
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <HardwareSerial::begin(unsigned long)+0xf0>
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <HardwareSerial::begin(unsigned long)+0xec>
     e5a:	20 95       	com	r18
     e5c:	28 23       	and	r18, r24
     e5e:	20 83       	st	Z, r18
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	08 95       	ret

00000e74 <HardwareSerial::available()>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     e74:	dc 01       	movw	r26, r24
     e76:	1c 96       	adiw	r26, 0x0c	; 12
     e78:	ed 91       	ld	r30, X+
     e7a:	fc 91       	ld	r31, X
     e7c:	1d 97       	sbiw	r26, 0x0d	; 13
     e7e:	e0 5c       	subi	r30, 0xC0	; 192
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	21 91       	ld	r18, Z+
     e84:	31 91       	ld	r19, Z+
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	28 1b       	sub	r18, r24
     e8c:	39 0b       	sbc	r19, r25
     e8e:	2f 73       	andi	r18, 0x3F	; 63
     e90:	30 70       	andi	r19, 0x00	; 0
}
     e92:	c9 01       	movw	r24, r18
     e94:	08 95       	ret

00000e96 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     e96:	dc 01       	movw	r26, r24
     e98:	1c 96       	adiw	r26, 0x0c	; 12
     e9a:	ed 91       	ld	r30, X+
     e9c:	fc 91       	ld	r31, X
     e9e:	1d 97       	sbiw	r26, 0x0d	; 13
     ea0:	e0 5c       	subi	r30, 0xC0	; 192
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	20 81       	ld	r18, Z
     ea6:	31 81       	ldd	r19, Z+1	; 0x01
     ea8:	e0 54       	subi	r30, 0x40	; 64
     eaa:	f0 40       	sbci	r31, 0x00	; 0
     eac:	df 01       	movw	r26, r30
     eae:	ae 5b       	subi	r26, 0xBE	; 190
     eb0:	bf 4f       	sbci	r27, 0xFF	; 255
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	11 97       	sbiw	r26, 0x01	; 1
     eb8:	28 17       	cp	r18, r24
     eba:	39 07       	cpc	r19, r25
     ebc:	19 f4       	brne	.+6      	; 0xec4 <HardwareSerial::peek()+0x2e>
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <HardwareSerial::peek()+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     ec4:	8d 91       	ld	r24, X+
     ec6:	9c 91       	ld	r25, X
     ec8:	e8 0f       	add	r30, r24
     eca:	f9 1f       	adc	r31, r25
     ecc:	80 81       	ld	r24, Z
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     ed2:	c9 01       	movw	r24, r18
     ed4:	08 95       	ret

00000ed6 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     ed6:	dc 01       	movw	r26, r24
     ed8:	1c 96       	adiw	r26, 0x0c	; 12
     eda:	ed 91       	ld	r30, X+
     edc:	fc 91       	ld	r31, X
     ede:	1d 97       	sbiw	r26, 0x0d	; 13
     ee0:	e0 5c       	subi	r30, 0xC0	; 192
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
     ee8:	e0 54       	subi	r30, 0x40	; 64
     eea:	f0 40       	sbci	r31, 0x00	; 0
     eec:	df 01       	movw	r26, r30
     eee:	ae 5b       	subi	r26, 0xBE	; 190
     ef0:	bf 4f       	sbci	r27, 0xFF	; 255
     ef2:	8d 91       	ld	r24, X+
     ef4:	9c 91       	ld	r25, X
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	28 17       	cp	r18, r24
     efa:	39 07       	cpc	r19, r25
     efc:	19 f4       	brne	.+6      	; 0xf04 <HardwareSerial::read()+0x2e>
     efe:	2f ef       	ldi	r18, 0xFF	; 255
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <HardwareSerial::read()+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     f04:	8d 91       	ld	r24, X+
     f06:	9c 91       	ld	r25, X
     f08:	11 97       	sbiw	r26, 0x01	; 1
     f0a:	e8 0f       	add	r30, r24
     f0c:	f9 1f       	adc	r31, r25
     f0e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     f10:	8d 91       	ld	r24, X+
     f12:	9c 91       	ld	r25, X
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	8f 73       	andi	r24, 0x3F	; 63
     f1a:	90 70       	andi	r25, 0x00	; 0
     f1c:	11 96       	adiw	r26, 0x01	; 1
     f1e:	9c 93       	st	X, r25
     f20:	8e 93       	st	-X, r24
    return c;
     f22:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     f24:	c9 01       	movw	r24, r18
     f26:	08 95       	ret

00000f28 <HardwareSerial::flush()>:

void HardwareSerial::flush()
     f28:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     f2a:	91 96       	adiw	r26, 0x21	; 33
     f2c:	8c 91       	ld	r24, X
     f2e:	91 97       	sbiw	r26, 0x21	; 33
     f30:	88 23       	and	r24, r24
     f32:	39 f0       	breq	.+14     	; 0xf42 <HardwareSerial::flush()+0x1a>
     f34:	54 96       	adiw	r26, 0x14	; 20
     f36:	ed 91       	ld	r30, X+
     f38:	fc 91       	ld	r31, X
     f3a:	55 97       	sbiw	r26, 0x15	; 21
     f3c:	80 81       	ld	r24, Z
     f3e:	86 ff       	sbrs	r24, 6
     f40:	f9 cf       	rjmp	.-14     	; 0xf34 <HardwareSerial::flush()+0xc>
  transmitting = false;
     f42:	91 96       	adiw	r26, 0x21	; 33
     f44:	1c 92       	st	X, r1
}
     f46:	08 95       	ret

00000f48 <HardwareSerial::write(unsigned char)>:

size_t HardwareSerial::write(uint8_t c)
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     f4e:	ee 85       	ldd	r30, Y+14	; 0x0e
     f50:	ff 85       	ldd	r31, Y+15	; 0x0f
     f52:	e0 5c       	subi	r30, 0xC0	; 192
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	20 81       	ld	r18, Z
     f58:	31 81       	ldd	r19, Z+1	; 0x01
     f5a:	e0 54       	subi	r30, 0x40	; 64
     f5c:	f0 40       	sbci	r31, 0x00	; 0
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	2f 73       	andi	r18, 0x3F	; 63
     f64:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     f66:	df 01       	movw	r26, r30
     f68:	ae 5b       	subi	r26, 0xBE	; 190
     f6a:	bf 4f       	sbci	r27, 0xFF	; 255
     f6c:	8d 91       	ld	r24, X+
     f6e:	9c 91       	ld	r25, X
     f70:	11 97       	sbiw	r26, 0x01	; 1
     f72:	28 17       	cp	r18, r24
     f74:	39 07       	cpc	r19, r25
     f76:	d1 f3       	breq	.-12     	; 0xf6c <HardwareSerial::write(unsigned char)+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     f78:	e0 5c       	subi	r30, 0xC0	; 192
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	e0 54       	subi	r30, 0x40	; 64
     f82:	f0 40       	sbci	r31, 0x00	; 0
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     f8a:	ee 85       	ldd	r30, Y+14	; 0x0e
     f8c:	ff 85       	ldd	r31, Y+15	; 0x0f
     f8e:	e0 5c       	subi	r30, 0xC0	; 192
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	31 83       	std	Z+1, r19	; 0x01
     f94:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     f96:	ee 89       	ldd	r30, Y+22	; 0x16
     f98:	ff 89       	ldd	r31, Y+23	; 0x17
     f9a:	20 81       	ld	r18, Z
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0f 8c       	ldd	r0, Y+31	; 0x1f
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <HardwareSerial::write(unsigned char)+0x60>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <HardwareSerial::write(unsigned char)+0x5c>
     fac:	28 2b       	or	r18, r24
     fae:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     fb4:	ec 89       	ldd	r30, Y+20	; 0x14
     fb6:	fd 89       	ldd	r31, Y+21	; 0x15
     fb8:	80 81       	ld	r24, Z
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	80 83       	st	Z, r24
  
  return 1;
}
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <global constructors keyed to rx_buffer>:
     fc8:	10 92 d0 01 	sts	0x01D0, r1
     fcc:	10 92 cf 01 	sts	0x01CF, r1
     fd0:	88 ee       	ldi	r24, 0xE8	; 232
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	80 93 d1 01 	sts	0x01D1, r24
     fdc:	90 93 d2 01 	sts	0x01D2, r25
     fe0:	a0 93 d3 01 	sts	0x01D3, r26
     fe4:	b0 93 d4 01 	sts	0x01D4, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     fe8:	80 e1       	ldi	r24, 0x10	; 16
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	90 93 ce 01 	sts	0x01CE, r25
     ff0:	80 93 cd 01 	sts	0x01CD, r24
{
  _rx_buffer = rx_buffer;
     ff4:	85 e4       	ldi	r24, 0x45	; 69
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	90 93 da 01 	sts	0x01DA, r25
     ffc:	80 93 d9 01 	sts	0x01D9, r24
  _tx_buffer = tx_buffer;
    1000:	89 e8       	ldi	r24, 0x89	; 137
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	90 93 dc 01 	sts	0x01DC, r25
    1008:	80 93 db 01 	sts	0x01DB, r24
  _ubrrh = ubrrh;
    100c:	85 ec       	ldi	r24, 0xC5	; 197
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	90 93 de 01 	sts	0x01DE, r25
    1014:	80 93 dd 01 	sts	0x01DD, r24
  _ubrrl = ubrrl;
    1018:	84 ec       	ldi	r24, 0xC4	; 196
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	90 93 e0 01 	sts	0x01E0, r25
    1020:	80 93 df 01 	sts	0x01DF, r24
  _ucsra = ucsra;
    1024:	80 ec       	ldi	r24, 0xC0	; 192
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	90 93 e2 01 	sts	0x01E2, r25
    102c:	80 93 e1 01 	sts	0x01E1, r24
  _ucsrb = ucsrb;
    1030:	81 ec       	ldi	r24, 0xC1	; 193
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	90 93 e4 01 	sts	0x01E4, r25
    1038:	80 93 e3 01 	sts	0x01E3, r24
  _ucsrc = ucsrc;
    103c:	82 ec       	ldi	r24, 0xC2	; 194
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 e6 01 	sts	0x01E6, r25
    1044:	80 93 e5 01 	sts	0x01E5, r24
  _udr = udr;
    1048:	86 ec       	ldi	r24, 0xC6	; 198
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	90 93 e8 01 	sts	0x01E8, r25
    1050:	80 93 e7 01 	sts	0x01E7, r24
  _rxen = rxen;
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	80 93 e9 01 	sts	0x01E9, r24
  _txen = txen;
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	80 93 ea 01 	sts	0x01EA, r24
  _rxcie = rxcie;
    1060:	87 e0       	ldi	r24, 0x07	; 7
    1062:	80 93 eb 01 	sts	0x01EB, r24
  _udrie = udrie;
    1066:	85 e0       	ldi	r24, 0x05	; 5
    1068:	80 93 ec 01 	sts	0x01EC, r24
  _u2x = u2x;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 ed 01 	sts	0x01ED, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1072:	08 95       	ret

00001074 <main>:
#include <Arduino.h>

int main(void)
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
{
	init();
    1078:	0e 94 5b 05 	call	0xab6	; 0xab6 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    107c:	0e 94 a6 02 	call	0x54c	; 0x54c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1080:	c5 e6       	ldi	r28, 0x65	; 101
    1082:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    1084:	0e 94 99 02 	call	0x532	; 0x532 <loop>
		if (serialEventRun) serialEventRun();
    1088:	20 97       	sbiw	r28, 0x00	; 0
    108a:	e1 f3       	breq	.-8      	; 0x1084 <main+0x10>
    108c:	0e 94 65 06 	call	0xcca	; 0xcca <serialEventRun()>
    1090:	f9 cf       	rjmp	.-14     	; 0x1084 <main+0x10>

00001092 <Print::write(unsigned char const*, unsigned int)>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	7c 01       	movw	r14, r24
    10a4:	6b 01       	movw	r12, r22
    10a6:	8a 01       	movw	r16, r20
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
    10aa:	d0 e0       	ldi	r29, 0x00	; 0
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <Print::write(unsigned char const*, unsigned int)+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    10ae:	d6 01       	movw	r26, r12
    10b0:	6d 91       	ld	r22, X+
    10b2:	6d 01       	movw	r12, r26
    10b4:	d7 01       	movw	r26, r14
    10b6:	ed 91       	ld	r30, X+
    10b8:	fc 91       	ld	r31, X
    10ba:	01 90       	ld	r0, Z+
    10bc:	f0 81       	ld	r31, Z
    10be:	e0 2d       	mov	r30, r0
    10c0:	c7 01       	movw	r24, r14
    10c2:	09 95       	icall
    10c4:	c8 0f       	add	r28, r24
    10c6:	d9 1f       	adc	r29, r25
    10c8:	01 50       	subi	r16, 0x01	; 1
    10ca:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    10cc:	01 15       	cp	r16, r1
    10ce:	11 05       	cpc	r17, r1
    10d0:	71 f7       	brne	.-36     	; 0x10ae <Print::write(unsigned char const*, unsigned int)+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    10d2:	ce 01       	movw	r24, r28
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	08 95       	ret

000010e6 <__subsf3>:
    10e6:	50 58       	subi	r21, 0x80	; 128

000010e8 <__addsf3>:
    10e8:	bb 27       	eor	r27, r27
    10ea:	aa 27       	eor	r26, r26
    10ec:	0e d0       	rcall	.+28     	; 0x110a <__addsf3x>
    10ee:	c5 c1       	rjmp	.+906    	; 0x147a <__fp_round>
    10f0:	85 d1       	rcall	.+778    	; 0x13fc <__fp_pscA>
    10f2:	30 f0       	brcs	.+12     	; 0x1100 <__addsf3+0x18>
    10f4:	8a d1       	rcall	.+788    	; 0x140a <__fp_pscB>
    10f6:	20 f0       	brcs	.+8      	; 0x1100 <__addsf3+0x18>
    10f8:	31 f4       	brne	.+12     	; 0x1106 <__addsf3+0x1e>
    10fa:	9f 3f       	cpi	r25, 0xFF	; 255
    10fc:	11 f4       	brne	.+4      	; 0x1102 <__addsf3+0x1a>
    10fe:	1e f4       	brtc	.+6      	; 0x1106 <__addsf3+0x1e>
    1100:	55 c1       	rjmp	.+682    	; 0x13ac <__fp_nan>
    1102:	0e f4       	brtc	.+2      	; 0x1106 <__addsf3+0x1e>
    1104:	e0 95       	com	r30
    1106:	e7 fb       	bst	r30, 7
    1108:	4b c1       	rjmp	.+662    	; 0x13a0 <__fp_inf>

0000110a <__addsf3x>:
    110a:	e9 2f       	mov	r30, r25
    110c:	d8 d1       	rcall	.+944    	; 0x14be <__fp_split3>
    110e:	80 f3       	brcs	.-32     	; 0x10f0 <__addsf3+0x8>
    1110:	ba 17       	cp	r27, r26
    1112:	62 07       	cpc	r22, r18
    1114:	73 07       	cpc	r23, r19
    1116:	84 07       	cpc	r24, r20
    1118:	95 07       	cpc	r25, r21
    111a:	18 f0       	brcs	.+6      	; 0x1122 <__addsf3x+0x18>
    111c:	71 f4       	brne	.+28     	; 0x113a <__addsf3x+0x30>
    111e:	9e f5       	brtc	.+102    	; 0x1186 <__addsf3x+0x7c>
    1120:	f0 c1       	rjmp	.+992    	; 0x1502 <__fp_zero>
    1122:	0e f4       	brtc	.+2      	; 0x1126 <__addsf3x+0x1c>
    1124:	e0 95       	com	r30
    1126:	0b 2e       	mov	r0, r27
    1128:	ba 2f       	mov	r27, r26
    112a:	a0 2d       	mov	r26, r0
    112c:	0b 01       	movw	r0, r22
    112e:	b9 01       	movw	r22, r18
    1130:	90 01       	movw	r18, r0
    1132:	0c 01       	movw	r0, r24
    1134:	ca 01       	movw	r24, r20
    1136:	a0 01       	movw	r20, r0
    1138:	11 24       	eor	r1, r1
    113a:	ff 27       	eor	r31, r31
    113c:	59 1b       	sub	r21, r25
    113e:	99 f0       	breq	.+38     	; 0x1166 <__addsf3x+0x5c>
    1140:	59 3f       	cpi	r21, 0xF9	; 249
    1142:	50 f4       	brcc	.+20     	; 0x1158 <__addsf3x+0x4e>
    1144:	50 3e       	cpi	r21, 0xE0	; 224
    1146:	68 f1       	brcs	.+90     	; 0x11a2 <__addsf3x+0x98>
    1148:	1a 16       	cp	r1, r26
    114a:	f0 40       	sbci	r31, 0x00	; 0
    114c:	a2 2f       	mov	r26, r18
    114e:	23 2f       	mov	r18, r19
    1150:	34 2f       	mov	r19, r20
    1152:	44 27       	eor	r20, r20
    1154:	58 5f       	subi	r21, 0xF8	; 248
    1156:	f3 cf       	rjmp	.-26     	; 0x113e <__addsf3x+0x34>
    1158:	46 95       	lsr	r20
    115a:	37 95       	ror	r19
    115c:	27 95       	ror	r18
    115e:	a7 95       	ror	r26
    1160:	f0 40       	sbci	r31, 0x00	; 0
    1162:	53 95       	inc	r21
    1164:	c9 f7       	brne	.-14     	; 0x1158 <__addsf3x+0x4e>
    1166:	7e f4       	brtc	.+30     	; 0x1186 <__addsf3x+0x7c>
    1168:	1f 16       	cp	r1, r31
    116a:	ba 0b       	sbc	r27, r26
    116c:	62 0b       	sbc	r22, r18
    116e:	73 0b       	sbc	r23, r19
    1170:	84 0b       	sbc	r24, r20
    1172:	ba f0       	brmi	.+46     	; 0x11a2 <__addsf3x+0x98>
    1174:	91 50       	subi	r25, 0x01	; 1
    1176:	a1 f0       	breq	.+40     	; 0x11a0 <__addsf3x+0x96>
    1178:	ff 0f       	add	r31, r31
    117a:	bb 1f       	adc	r27, r27
    117c:	66 1f       	adc	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	c2 f7       	brpl	.-16     	; 0x1174 <__addsf3x+0x6a>
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <__addsf3x+0x98>
    1186:	ba 0f       	add	r27, r26
    1188:	62 1f       	adc	r22, r18
    118a:	73 1f       	adc	r23, r19
    118c:	84 1f       	adc	r24, r20
    118e:	48 f4       	brcc	.+18     	; 0x11a2 <__addsf3x+0x98>
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	f7 95       	ror	r31
    119a:	9e 3f       	cpi	r25, 0xFE	; 254
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__addsf3x+0x96>
    119e:	b3 cf       	rjmp	.-154    	; 0x1106 <__addsf3+0x1e>
    11a0:	93 95       	inc	r25
    11a2:	88 0f       	add	r24, r24
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <__addsf3x+0x9e>
    11a6:	99 27       	eor	r25, r25
    11a8:	ee 0f       	add	r30, r30
    11aa:	97 95       	ror	r25
    11ac:	87 95       	ror	r24
    11ae:	08 95       	ret

000011b0 <atan>:
    11b0:	df 93       	push	r29
    11b2:	dd 27       	eor	r29, r29
    11b4:	b9 2f       	mov	r27, r25
    11b6:	bf 77       	andi	r27, 0x7F	; 127
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	16 16       	cp	r1, r22
    11be:	17 06       	cpc	r1, r23
    11c0:	48 07       	cpc	r20, r24
    11c2:	5b 07       	cpc	r21, r27
    11c4:	10 f4       	brcc	.+4      	; 0x11ca <atan+0x1a>
    11c6:	d9 2f       	mov	r29, r25
    11c8:	a7 d1       	rcall	.+846    	; 0x1518 <inverse>
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	7f 93       	push	r23
    11d0:	6f 93       	push	r22
    11d2:	12 d2       	rcall	.+1060   	; 0x15f8 <square>
    11d4:	e8 e6       	ldi	r30, 0x68	; 104
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	ec d0       	rcall	.+472    	; 0x13b2 <__fp_powser>
    11da:	4f d1       	rcall	.+670    	; 0x147a <__fp_round>
    11dc:	2f 91       	pop	r18
    11de:	3f 91       	pop	r19
    11e0:	4f 91       	pop	r20
    11e2:	5f 91       	pop	r21
    11e4:	ac d1       	rcall	.+856    	; 0x153e <__mulsf3x>
    11e6:	dd 23       	and	r29, r29
    11e8:	49 f0       	breq	.+18     	; 0x11fc <atan+0x4c>
    11ea:	90 58       	subi	r25, 0x80	; 128
    11ec:	a2 ea       	ldi	r26, 0xA2	; 162
    11ee:	2a ed       	ldi	r18, 0xDA	; 218
    11f0:	3f e0       	ldi	r19, 0x0F	; 15
    11f2:	49 ec       	ldi	r20, 0xC9	; 201
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	d0 78       	andi	r29, 0x80	; 128
    11f8:	5d 27       	eor	r21, r29
    11fa:	87 df       	rcall	.-242    	; 0x110a <__addsf3x>
    11fc:	df 91       	pop	r29
    11fe:	3d c1       	rjmp	.+634    	; 0x147a <__fp_round>

00001200 <__cmpsf2>:
    1200:	ab d0       	rcall	.+342    	; 0x1358 <__fp_cmp>
    1202:	08 f4       	brcc	.+2      	; 0x1206 <__cmpsf2+0x6>
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	08 95       	ret

00001208 <cos>:
    1208:	08 d1       	rcall	.+528    	; 0x141a <__fp_rempio2>
    120a:	e3 95       	inc	r30
    120c:	47 c1       	rjmp	.+654    	; 0x149c <__fp_sinus>

0000120e <__divsf3>:
    120e:	0c d0       	rcall	.+24     	; 0x1228 <__divsf3x>
    1210:	34 c1       	rjmp	.+616    	; 0x147a <__fp_round>
    1212:	fb d0       	rcall	.+502    	; 0x140a <__fp_pscB>
    1214:	40 f0       	brcs	.+16     	; 0x1226 <__divsf3+0x18>
    1216:	f2 d0       	rcall	.+484    	; 0x13fc <__fp_pscA>
    1218:	30 f0       	brcs	.+12     	; 0x1226 <__divsf3+0x18>
    121a:	21 f4       	brne	.+8      	; 0x1224 <__divsf3+0x16>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	19 f0       	breq	.+6      	; 0x1226 <__divsf3+0x18>
    1220:	bf c0       	rjmp	.+382    	; 0x13a0 <__fp_inf>
    1222:	51 11       	cpse	r21, r1
    1224:	6f c1       	rjmp	.+734    	; 0x1504 <__fp_szero>
    1226:	c2 c0       	rjmp	.+388    	; 0x13ac <__fp_nan>

00001228 <__divsf3x>:
    1228:	4a d1       	rcall	.+660    	; 0x14be <__fp_split3>
    122a:	98 f3       	brcs	.-26     	; 0x1212 <__divsf3+0x4>

0000122c <__divsf3_pse>:
    122c:	99 23       	and	r25, r25
    122e:	c9 f3       	breq	.-14     	; 0x1222 <__divsf3+0x14>
    1230:	55 23       	and	r21, r21
    1232:	b1 f3       	breq	.-20     	; 0x1220 <__divsf3+0x12>
    1234:	95 1b       	sub	r25, r21
    1236:	55 0b       	sbc	r21, r21
    1238:	bb 27       	eor	r27, r27
    123a:	aa 27       	eor	r26, r26
    123c:	62 17       	cp	r22, r18
    123e:	73 07       	cpc	r23, r19
    1240:	84 07       	cpc	r24, r20
    1242:	38 f0       	brcs	.+14     	; 0x1252 <__divsf3_pse+0x26>
    1244:	9f 5f       	subi	r25, 0xFF	; 255
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	44 1f       	adc	r20, r20
    124e:	aa 1f       	adc	r26, r26
    1250:	a9 f3       	breq	.-22     	; 0x123c <__divsf3_pse+0x10>
    1252:	33 d0       	rcall	.+102    	; 0x12ba <__divsf3_pse+0x8e>
    1254:	0e 2e       	mov	r0, r30
    1256:	3a f0       	brmi	.+14     	; 0x1266 <__divsf3_pse+0x3a>
    1258:	e0 e8       	ldi	r30, 0x80	; 128
    125a:	30 d0       	rcall	.+96     	; 0x12bc <__divsf3_pse+0x90>
    125c:	91 50       	subi	r25, 0x01	; 1
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	e6 95       	lsr	r30
    1262:	00 1c       	adc	r0, r0
    1264:	ca f7       	brpl	.-14     	; 0x1258 <__divsf3_pse+0x2c>
    1266:	29 d0       	rcall	.+82     	; 0x12ba <__divsf3_pse+0x8e>
    1268:	fe 2f       	mov	r31, r30
    126a:	27 d0       	rcall	.+78     	; 0x12ba <__divsf3_pse+0x8e>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	bb 1f       	adc	r27, r27
    1274:	26 17       	cp	r18, r22
    1276:	37 07       	cpc	r19, r23
    1278:	48 07       	cpc	r20, r24
    127a:	ab 07       	cpc	r26, r27
    127c:	b0 e8       	ldi	r27, 0x80	; 128
    127e:	09 f0       	breq	.+2      	; 0x1282 <__divsf3_pse+0x56>
    1280:	bb 0b       	sbc	r27, r27
    1282:	80 2d       	mov	r24, r0
    1284:	bf 01       	movw	r22, r30
    1286:	ff 27       	eor	r31, r31
    1288:	93 58       	subi	r25, 0x83	; 131
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	2a f0       	brmi	.+10     	; 0x1298 <__divsf3_pse+0x6c>
    128e:	9e 3f       	cpi	r25, 0xFE	; 254
    1290:	51 05       	cpc	r21, r1
    1292:	68 f0       	brcs	.+26     	; 0x12ae <__divsf3_pse+0x82>
    1294:	85 c0       	rjmp	.+266    	; 0x13a0 <__fp_inf>
    1296:	36 c1       	rjmp	.+620    	; 0x1504 <__fp_szero>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	ec f3       	brlt	.-6      	; 0x1296 <__divsf3_pse+0x6a>
    129c:	98 3e       	cpi	r25, 0xE8	; 232
    129e:	dc f3       	brlt	.-10     	; 0x1296 <__divsf3_pse+0x6a>
    12a0:	86 95       	lsr	r24
    12a2:	77 95       	ror	r23
    12a4:	67 95       	ror	r22
    12a6:	b7 95       	ror	r27
    12a8:	f7 95       	ror	r31
    12aa:	9f 5f       	subi	r25, 0xFF	; 255
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__divsf3_pse+0x74>
    12ae:	88 0f       	add	r24, r24
    12b0:	91 1d       	adc	r25, r1
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret
    12ba:	e1 e0       	ldi	r30, 0x01	; 1
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	bb 1f       	adc	r27, r27
    12c4:	62 17       	cp	r22, r18
    12c6:	73 07       	cpc	r23, r19
    12c8:	84 07       	cpc	r24, r20
    12ca:	ba 07       	cpc	r27, r26
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__divsf3_pse+0xaa>
    12ce:	62 1b       	sub	r22, r18
    12d0:	73 0b       	sbc	r23, r19
    12d2:	84 0b       	sbc	r24, r20
    12d4:	ba 0b       	sbc	r27, r26
    12d6:	ee 1f       	adc	r30, r30
    12d8:	88 f7       	brcc	.-30     	; 0x12bc <__divsf3_pse+0x90>
    12da:	e0 95       	com	r30
    12dc:	08 95       	ret

000012de <__floatunsisf>:
    12de:	e8 94       	clt
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <__floatsisf+0x12>

000012e2 <__floatsisf>:
    12e2:	97 fb       	bst	r25, 7
    12e4:	3e f4       	brtc	.+14     	; 0x12f4 <__floatsisf+0x12>
    12e6:	90 95       	com	r25
    12e8:	80 95       	com	r24
    12ea:	70 95       	com	r23
    12ec:	61 95       	neg	r22
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	8f 4f       	sbci	r24, 0xFF	; 255
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	99 23       	and	r25, r25
    12f6:	a9 f0       	breq	.+42     	; 0x1322 <__floatsisf+0x40>
    12f8:	f9 2f       	mov	r31, r25
    12fa:	96 e9       	ldi	r25, 0x96	; 150
    12fc:	bb 27       	eor	r27, r27
    12fe:	93 95       	inc	r25
    1300:	f6 95       	lsr	r31
    1302:	87 95       	ror	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b7 95       	ror	r27
    130a:	f1 11       	cpse	r31, r1
    130c:	f8 cf       	rjmp	.-16     	; 0x12fe <__floatsisf+0x1c>
    130e:	fa f4       	brpl	.+62     	; 0x134e <__floatsisf+0x6c>
    1310:	bb 0f       	add	r27, r27
    1312:	11 f4       	brne	.+4      	; 0x1318 <__floatsisf+0x36>
    1314:	60 ff       	sbrs	r22, 0
    1316:	1b c0       	rjmp	.+54     	; 0x134e <__floatsisf+0x6c>
    1318:	6f 5f       	subi	r22, 0xFF	; 255
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	8f 4f       	sbci	r24, 0xFF	; 255
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	16 c0       	rjmp	.+44     	; 0x134e <__floatsisf+0x6c>
    1322:	88 23       	and	r24, r24
    1324:	11 f0       	breq	.+4      	; 0x132a <__floatsisf+0x48>
    1326:	96 e9       	ldi	r25, 0x96	; 150
    1328:	11 c0       	rjmp	.+34     	; 0x134c <__floatsisf+0x6a>
    132a:	77 23       	and	r23, r23
    132c:	21 f0       	breq	.+8      	; 0x1336 <__floatsisf+0x54>
    132e:	9e e8       	ldi	r25, 0x8E	; 142
    1330:	87 2f       	mov	r24, r23
    1332:	76 2f       	mov	r23, r22
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <__floatsisf+0x5e>
    1336:	66 23       	and	r22, r22
    1338:	71 f0       	breq	.+28     	; 0x1356 <__floatsisf+0x74>
    133a:	96 e8       	ldi	r25, 0x86	; 134
    133c:	86 2f       	mov	r24, r22
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	2a f0       	brmi	.+10     	; 0x134e <__floatsisf+0x6c>
    1344:	9a 95       	dec	r25
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	da f7       	brpl	.-10     	; 0x1344 <__floatsisf+0x62>
    134e:	88 0f       	add	r24, r24
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__fp_cmp>:
    1358:	99 0f       	add	r25, r25
    135a:	00 08       	sbc	r0, r0
    135c:	55 0f       	add	r21, r21
    135e:	aa 0b       	sbc	r26, r26
    1360:	e0 e8       	ldi	r30, 0x80	; 128
    1362:	fe ef       	ldi	r31, 0xFE	; 254
    1364:	16 16       	cp	r1, r22
    1366:	17 06       	cpc	r1, r23
    1368:	e8 07       	cpc	r30, r24
    136a:	f9 07       	cpc	r31, r25
    136c:	c0 f0       	brcs	.+48     	; 0x139e <__fp_cmp+0x46>
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	e4 07       	cpc	r30, r20
    1374:	f5 07       	cpc	r31, r21
    1376:	98 f0       	brcs	.+38     	; 0x139e <__fp_cmp+0x46>
    1378:	62 1b       	sub	r22, r18
    137a:	73 0b       	sbc	r23, r19
    137c:	84 0b       	sbc	r24, r20
    137e:	95 0b       	sbc	r25, r21
    1380:	39 f4       	brne	.+14     	; 0x1390 <__fp_cmp+0x38>
    1382:	0a 26       	eor	r0, r26
    1384:	61 f0       	breq	.+24     	; 0x139e <__fp_cmp+0x46>
    1386:	23 2b       	or	r18, r19
    1388:	24 2b       	or	r18, r20
    138a:	25 2b       	or	r18, r21
    138c:	21 f4       	brne	.+8      	; 0x1396 <__fp_cmp+0x3e>
    138e:	08 95       	ret
    1390:	0a 26       	eor	r0, r26
    1392:	09 f4       	brne	.+2      	; 0x1396 <__fp_cmp+0x3e>
    1394:	a1 40       	sbci	r26, 0x01	; 1
    1396:	a6 95       	lsr	r26
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	81 1d       	adc	r24, r1
    139c:	81 1d       	adc	r24, r1
    139e:	08 95       	ret

000013a0 <__fp_inf>:
    13a0:	97 f9       	bld	r25, 7
    13a2:	9f 67       	ori	r25, 0x7F	; 127
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	08 95       	ret

000013ac <__fp_nan>:
    13ac:	9f ef       	ldi	r25, 0xFF	; 255
    13ae:	80 ec       	ldi	r24, 0xC0	; 192
    13b0:	08 95       	ret

000013b2 <__fp_powser>:
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	1f 93       	push	r17
    13b8:	0f 93       	push	r16
    13ba:	ff 92       	push	r15
    13bc:	ef 92       	push	r14
    13be:	df 92       	push	r13
    13c0:	7b 01       	movw	r14, r22
    13c2:	8c 01       	movw	r16, r24
    13c4:	68 94       	set
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <__fp_powser+0x20>
    13c8:	da 2e       	mov	r13, r26
    13ca:	ef 01       	movw	r28, r30
    13cc:	b8 d0       	rcall	.+368    	; 0x153e <__mulsf3x>
    13ce:	fe 01       	movw	r30, r28
    13d0:	e8 94       	clt
    13d2:	a5 91       	lpm	r26, Z+
    13d4:	25 91       	lpm	r18, Z+
    13d6:	35 91       	lpm	r19, Z+
    13d8:	45 91       	lpm	r20, Z+
    13da:	55 91       	lpm	r21, Z+
    13dc:	ae f3       	brts	.-22     	; 0x13c8 <__fp_powser+0x16>
    13de:	ef 01       	movw	r28, r30
    13e0:	94 de       	rcall	.-728    	; 0x110a <__addsf3x>
    13e2:	fe 01       	movw	r30, r28
    13e4:	97 01       	movw	r18, r14
    13e6:	a8 01       	movw	r20, r16
    13e8:	da 94       	dec	r13
    13ea:	79 f7       	brne	.-34     	; 0x13ca <__fp_powser+0x18>
    13ec:	df 90       	pop	r13
    13ee:	ef 90       	pop	r14
    13f0:	ff 90       	pop	r15
    13f2:	0f 91       	pop	r16
    13f4:	1f 91       	pop	r17
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <__fp_pscA>:
    13fc:	00 24       	eor	r0, r0
    13fe:	0a 94       	dec	r0
    1400:	16 16       	cp	r1, r22
    1402:	17 06       	cpc	r1, r23
    1404:	18 06       	cpc	r1, r24
    1406:	09 06       	cpc	r0, r25
    1408:	08 95       	ret

0000140a <__fp_pscB>:
    140a:	00 24       	eor	r0, r0
    140c:	0a 94       	dec	r0
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	05 06       	cpc	r0, r21
    1416:	08 95       	ret
    1418:	c9 cf       	rjmp	.-110    	; 0x13ac <__fp_nan>

0000141a <__fp_rempio2>:
    141a:	59 d0       	rcall	.+178    	; 0x14ce <__fp_splitA>
    141c:	e8 f3       	brcs	.-6      	; 0x1418 <__fp_pscB+0xe>
    141e:	e8 94       	clt
    1420:	ef ef       	ldi	r30, 0xFF	; 255
    1422:	bb 27       	eor	r27, r27
    1424:	3f e0       	ldi	r19, 0x0F	; 15
    1426:	48 ec       	ldi	r20, 0xC8	; 200
    1428:	5f e7       	ldi	r21, 0x7F	; 127
    142a:	6b 3d       	cpi	r22, 0xDB	; 219
    142c:	73 07       	cpc	r23, r19
    142e:	84 07       	cpc	r24, r20
    1430:	95 07       	cpc	r25, r21
    1432:	08 f1       	brcs	.+66     	; 0x1476 <__fp_rempio2+0x5c>
    1434:	ff 27       	eor	r31, r31
    1436:	9f 57       	subi	r25, 0x7F	; 127
    1438:	b2 5a       	subi	r27, 0xA2	; 162
    143a:	6a 4d       	sbci	r22, 0xDA	; 218
    143c:	7f 40       	sbci	r23, 0x0F	; 15
    143e:	89 4c       	sbci	r24, 0xC9	; 201
    1440:	f0 40       	sbci	r31, 0x00	; 0
    1442:	32 f4       	brpl	.+12     	; 0x1450 <__fp_rempio2+0x36>
    1444:	be 55       	subi	r27, 0x5E	; 94
    1446:	65 42       	sbci	r22, 0x25	; 37
    1448:	70 4f       	sbci	r23, 0xF0	; 240
    144a:	86 43       	sbci	r24, 0x36	; 54
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	08 94       	sec
    1450:	ee 1f       	adc	r30, r30
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	30 f0       	brcs	.+12     	; 0x1462 <__fp_rempio2+0x48>
    1456:	bb 0f       	add	r27, r27
    1458:	66 1f       	adc	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	ff 1f       	adc	r31, r31
    1460:	eb cf       	rjmp	.-42     	; 0x1438 <__fp_rempio2+0x1e>
    1462:	9e e7       	ldi	r25, 0x7E	; 126
    1464:	88 23       	and	r24, r24
    1466:	32 f0       	brmi	.+12     	; 0x1474 <__fp_rempio2+0x5a>
    1468:	bb 0f       	add	r27, r27
    146a:	66 1f       	adc	r22, r22
    146c:	77 1f       	adc	r23, r23
    146e:	88 1f       	adc	r24, r24
    1470:	9a 95       	dec	r25
    1472:	c1 f7       	brne	.-16     	; 0x1464 <__fp_rempio2+0x4a>
    1474:	93 95       	inc	r25
    1476:	e0 95       	com	r30
    1478:	c2 c0       	rjmp	.+388    	; 0x15fe <__fp_mpack>

0000147a <__fp_round>:
    147a:	09 2e       	mov	r0, r25
    147c:	03 94       	inc	r0
    147e:	00 0c       	add	r0, r0
    1480:	11 f4       	brne	.+4      	; 0x1486 <__fp_round+0xc>
    1482:	88 23       	and	r24, r24
    1484:	52 f0       	brmi	.+20     	; 0x149a <__fp_round+0x20>
    1486:	bb 0f       	add	r27, r27
    1488:	40 f4       	brcc	.+16     	; 0x149a <__fp_round+0x20>
    148a:	bf 2b       	or	r27, r31
    148c:	11 f4       	brne	.+4      	; 0x1492 <__fp_round+0x18>
    148e:	60 ff       	sbrs	r22, 0
    1490:	04 c0       	rjmp	.+8      	; 0x149a <__fp_round+0x20>
    1492:	6f 5f       	subi	r22, 0xFF	; 255
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	8f 4f       	sbci	r24, 0xFF	; 255
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	08 95       	ret

0000149c <__fp_sinus>:
    149c:	ef 93       	push	r30
    149e:	e0 ff       	sbrs	r30, 0
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <__fp_sinus+0x12>
    14a2:	a2 ea       	ldi	r26, 0xA2	; 162
    14a4:	2a ed       	ldi	r18, 0xDA	; 218
    14a6:	3f e0       	ldi	r19, 0x0F	; 15
    14a8:	49 ec       	ldi	r20, 0xC9	; 201
    14aa:	5f eb       	ldi	r21, 0xBF	; 191
    14ac:	2e de       	rcall	.-932    	; 0x110a <__addsf3x>
    14ae:	e5 df       	rcall	.-54     	; 0x147a <__fp_round>
    14b0:	0f 90       	pop	r0
    14b2:	03 94       	inc	r0
    14b4:	01 fc       	sbrc	r0, 1
    14b6:	90 58       	subi	r25, 0x80	; 128
    14b8:	e5 e9       	ldi	r30, 0x95	; 149
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	b0 c0       	rjmp	.+352    	; 0x161e <__fp_powsodd>

000014be <__fp_split3>:
    14be:	57 fd       	sbrc	r21, 7
    14c0:	90 58       	subi	r25, 0x80	; 128
    14c2:	44 0f       	add	r20, r20
    14c4:	55 1f       	adc	r21, r21
    14c6:	59 f0       	breq	.+22     	; 0x14de <__fp_splitA+0x10>
    14c8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <__fp_splitA+0x1a>
    14cc:	47 95       	ror	r20

000014ce <__fp_splitA>:
    14ce:	88 0f       	add	r24, r24
    14d0:	97 fb       	bst	r25, 7
    14d2:	99 1f       	adc	r25, r25
    14d4:	61 f0       	breq	.+24     	; 0x14ee <__fp_splitA+0x20>
    14d6:	9f 3f       	cpi	r25, 0xFF	; 255
    14d8:	79 f0       	breq	.+30     	; 0x14f8 <__fp_splitA+0x2a>
    14da:	87 95       	ror	r24
    14dc:	08 95       	ret
    14de:	12 16       	cp	r1, r18
    14e0:	13 06       	cpc	r1, r19
    14e2:	14 06       	cpc	r1, r20
    14e4:	55 1f       	adc	r21, r21
    14e6:	f2 cf       	rjmp	.-28     	; 0x14cc <__fp_split3+0xe>
    14e8:	46 95       	lsr	r20
    14ea:	f1 df       	rcall	.-30     	; 0x14ce <__fp_splitA>
    14ec:	08 c0       	rjmp	.+16     	; 0x14fe <__fp_splitA+0x30>
    14ee:	16 16       	cp	r1, r22
    14f0:	17 06       	cpc	r1, r23
    14f2:	18 06       	cpc	r1, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	f1 cf       	rjmp	.-30     	; 0x14da <__fp_splitA+0xc>
    14f8:	86 95       	lsr	r24
    14fa:	71 05       	cpc	r23, r1
    14fc:	61 05       	cpc	r22, r1
    14fe:	08 94       	sec
    1500:	08 95       	ret

00001502 <__fp_zero>:
    1502:	e8 94       	clt

00001504 <__fp_szero>:
    1504:	bb 27       	eor	r27, r27
    1506:	66 27       	eor	r22, r22
    1508:	77 27       	eor	r23, r23
    150a:	cb 01       	movw	r24, r22
    150c:	97 f9       	bld	r25, 7
    150e:	08 95       	ret

00001510 <__gesf2>:
    1510:	23 df       	rcall	.-442    	; 0x1358 <__fp_cmp>
    1512:	08 f4       	brcc	.+2      	; 0x1516 <__gesf2+0x6>
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	08 95       	ret

00001518 <inverse>:
    1518:	9b 01       	movw	r18, r22
    151a:	ac 01       	movw	r20, r24
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	80 e8       	ldi	r24, 0x80	; 128
    1522:	9f e3       	ldi	r25, 0x3F	; 63
    1524:	74 ce       	rjmp	.-792    	; 0x120e <__divsf3>

00001526 <__mulsf3>:
    1526:	0b d0       	rcall	.+22     	; 0x153e <__mulsf3x>
    1528:	a8 cf       	rjmp	.-176    	; 0x147a <__fp_round>
    152a:	68 df       	rcall	.-304    	; 0x13fc <__fp_pscA>
    152c:	28 f0       	brcs	.+10     	; 0x1538 <__mulsf3+0x12>
    152e:	6d df       	rcall	.-294    	; 0x140a <__fp_pscB>
    1530:	18 f0       	brcs	.+6      	; 0x1538 <__mulsf3+0x12>
    1532:	95 23       	and	r25, r21
    1534:	09 f0       	breq	.+2      	; 0x1538 <__mulsf3+0x12>
    1536:	34 cf       	rjmp	.-408    	; 0x13a0 <__fp_inf>
    1538:	39 cf       	rjmp	.-398    	; 0x13ac <__fp_nan>
    153a:	11 24       	eor	r1, r1
    153c:	e3 cf       	rjmp	.-58     	; 0x1504 <__fp_szero>

0000153e <__mulsf3x>:
    153e:	bf df       	rcall	.-130    	; 0x14be <__fp_split3>
    1540:	a0 f3       	brcs	.-24     	; 0x152a <__mulsf3+0x4>

00001542 <__mulsf3_pse>:
    1542:	95 9f       	mul	r25, r21
    1544:	d1 f3       	breq	.-12     	; 0x153a <__mulsf3+0x14>
    1546:	95 0f       	add	r25, r21
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	55 1f       	adc	r21, r21
    154c:	62 9f       	mul	r22, r18
    154e:	f0 01       	movw	r30, r0
    1550:	72 9f       	mul	r23, r18
    1552:	bb 27       	eor	r27, r27
    1554:	f0 0d       	add	r31, r0
    1556:	b1 1d       	adc	r27, r1
    1558:	63 9f       	mul	r22, r19
    155a:	aa 27       	eor	r26, r26
    155c:	f0 0d       	add	r31, r0
    155e:	b1 1d       	adc	r27, r1
    1560:	aa 1f       	adc	r26, r26
    1562:	64 9f       	mul	r22, r20
    1564:	66 27       	eor	r22, r22
    1566:	b0 0d       	add	r27, r0
    1568:	a1 1d       	adc	r26, r1
    156a:	66 1f       	adc	r22, r22
    156c:	82 9f       	mul	r24, r18
    156e:	22 27       	eor	r18, r18
    1570:	b0 0d       	add	r27, r0
    1572:	a1 1d       	adc	r26, r1
    1574:	62 1f       	adc	r22, r18
    1576:	73 9f       	mul	r23, r19
    1578:	b0 0d       	add	r27, r0
    157a:	a1 1d       	adc	r26, r1
    157c:	62 1f       	adc	r22, r18
    157e:	83 9f       	mul	r24, r19
    1580:	a0 0d       	add	r26, r0
    1582:	61 1d       	adc	r22, r1
    1584:	22 1f       	adc	r18, r18
    1586:	74 9f       	mul	r23, r20
    1588:	33 27       	eor	r19, r19
    158a:	a0 0d       	add	r26, r0
    158c:	61 1d       	adc	r22, r1
    158e:	23 1f       	adc	r18, r19
    1590:	84 9f       	mul	r24, r20
    1592:	60 0d       	add	r22, r0
    1594:	21 1d       	adc	r18, r1
    1596:	82 2f       	mov	r24, r18
    1598:	76 2f       	mov	r23, r22
    159a:	6a 2f       	mov	r22, r26
    159c:	11 24       	eor	r1, r1
    159e:	9f 57       	subi	r25, 0x7F	; 127
    15a0:	50 40       	sbci	r21, 0x00	; 0
    15a2:	8a f0       	brmi	.+34     	; 0x15c6 <__mulsf3_pse+0x84>
    15a4:	e1 f0       	breq	.+56     	; 0x15de <__mulsf3_pse+0x9c>
    15a6:	88 23       	and	r24, r24
    15a8:	4a f0       	brmi	.+18     	; 0x15bc <__mulsf3_pse+0x7a>
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	bb 1f       	adc	r27, r27
    15b0:	66 1f       	adc	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	91 50       	subi	r25, 0x01	; 1
    15b8:	50 40       	sbci	r21, 0x00	; 0
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__mulsf3_pse+0x64>
    15bc:	9e 3f       	cpi	r25, 0xFE	; 254
    15be:	51 05       	cpc	r21, r1
    15c0:	70 f0       	brcs	.+28     	; 0x15de <__mulsf3_pse+0x9c>
    15c2:	ee ce       	rjmp	.-548    	; 0x13a0 <__fp_inf>
    15c4:	9f cf       	rjmp	.-194    	; 0x1504 <__fp_szero>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	ec f3       	brlt	.-6      	; 0x15c4 <__mulsf3_pse+0x82>
    15ca:	98 3e       	cpi	r25, 0xE8	; 232
    15cc:	dc f3       	brlt	.-10     	; 0x15c4 <__mulsf3_pse+0x82>
    15ce:	86 95       	lsr	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	b7 95       	ror	r27
    15d6:	f7 95       	ror	r31
    15d8:	e7 95       	ror	r30
    15da:	9f 5f       	subi	r25, 0xFF	; 255
    15dc:	c1 f7       	brne	.-16     	; 0x15ce <__mulsf3_pse+0x8c>
    15de:	fe 2b       	or	r31, r30
    15e0:	88 0f       	add	r24, r24
    15e2:	91 1d       	adc	r25, r1
    15e4:	96 95       	lsr	r25
    15e6:	87 95       	ror	r24
    15e8:	97 f9       	bld	r25, 7
    15ea:	08 95       	ret

000015ec <sin>:
    15ec:	9f 93       	push	r25
    15ee:	15 df       	rcall	.-470    	; 0x141a <__fp_rempio2>
    15f0:	0f 90       	pop	r0
    15f2:	07 fc       	sbrc	r0, 7
    15f4:	ee 5f       	subi	r30, 0xFE	; 254
    15f6:	52 cf       	rjmp	.-348    	; 0x149c <__fp_sinus>

000015f8 <square>:
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	94 cf       	rjmp	.-216    	; 0x1526 <__mulsf3>

000015fe <__fp_mpack>:
    15fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1600:	49 f0       	breq	.+18     	; 0x1614 <__fp_mpack+0x16>
    1602:	91 50       	subi	r25, 0x01	; 1
    1604:	28 f4       	brcc	.+10     	; 0x1610 <__fp_mpack+0x12>
    1606:	86 95       	lsr	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b7 95       	ror	r27
    160e:	9f 5f       	subi	r25, 0xFF	; 255
    1610:	80 38       	cpi	r24, 0x80	; 128
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	88 0f       	add	r24, r24
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__fp_powsodd>:
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	7f 93       	push	r23
    1624:	6f 93       	push	r22
    1626:	ff 93       	push	r31
    1628:	ef 93       	push	r30
    162a:	9b 01       	movw	r18, r22
    162c:	ac 01       	movw	r20, r24
    162e:	7b df       	rcall	.-266    	; 0x1526 <__mulsf3>
    1630:	ef 91       	pop	r30
    1632:	ff 91       	pop	r31
    1634:	be de       	rcall	.-644    	; 0x13b2 <__fp_powser>
    1636:	2f 91       	pop	r18
    1638:	3f 91       	pop	r19
    163a:	4f 91       	pop	r20
    163c:	5f 91       	pop	r21
    163e:	73 cf       	rjmp	.-282    	; 0x1526 <__mulsf3>

00001640 <__udivmodsi4>:
    1640:	a1 e2       	ldi	r26, 0x21	; 33
    1642:	1a 2e       	mov	r1, r26
    1644:	aa 1b       	sub	r26, r26
    1646:	bb 1b       	sub	r27, r27
    1648:	fd 01       	movw	r30, r26
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <__udivmodsi4_ep>

0000164c <__udivmodsi4_loop>:
    164c:	aa 1f       	adc	r26, r26
    164e:	bb 1f       	adc	r27, r27
    1650:	ee 1f       	adc	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	a2 17       	cp	r26, r18
    1656:	b3 07       	cpc	r27, r19
    1658:	e4 07       	cpc	r30, r20
    165a:	f5 07       	cpc	r31, r21
    165c:	20 f0       	brcs	.+8      	; 0x1666 <__udivmodsi4_ep>
    165e:	a2 1b       	sub	r26, r18
    1660:	b3 0b       	sbc	r27, r19
    1662:	e4 0b       	sbc	r30, r20
    1664:	f5 0b       	sbc	r31, r21

00001666 <__udivmodsi4_ep>:
    1666:	66 1f       	adc	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	1a 94       	dec	r1
    1670:	69 f7       	brne	.-38     	; 0x164c <__udivmodsi4_loop>
    1672:	60 95       	com	r22
    1674:	70 95       	com	r23
    1676:	80 95       	com	r24
    1678:	90 95       	com	r25
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	bd 01       	movw	r22, r26
    1680:	cf 01       	movw	r24, r30
    1682:	08 95       	ret

00001684 <__tablejump2__>:
    1684:	ee 0f       	add	r30, r30
    1686:	ff 1f       	adc	r31, r31

00001688 <__tablejump__>:
    1688:	05 90       	lpm	r0, Z+
    168a:	f4 91       	lpm	r31, Z+
    168c:	e0 2d       	mov	r30, r0
    168e:	09 94       	ijmp

00001690 <_exit>:
    1690:	f8 94       	cli

00001692 <__stop_program>:
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <__stop_program>
